# Carthago Operator for Jenkins Custom Resources Helm chart

# apiVersion is the version of the Custom Resources manifests
apiVersion: carthago.cloud/v1beta1

# Jenkins instance configuration
jenkins:
  # enabled can enable or disable the Jenkins instance
  # Set to false if you have configured CR already and/or you want to deploy an operator only
  enabled: true

  # name of resource
  # The pod name will be jenkins-<name> (name will be set as suffix)
  name: jenkins

  # labels are injected into metadata labels field
  #labels: {}

  # annotations are injected into metadata annotations field
  annotations: {}

  # labels and annotations propagated to Jenkins Controller pod
  podMetadata:
    labels: {}
    annotations: {}

  # podSpec
  podSpec:
    initContainers: []
    sidecars: []
    jenkinsController:
      name: jenkins-controller
      image: jenkins/jenkins:2.332.3-lts
      imagePullPolicy: IfNotPresent
      command: []
      livenessProbe: {}
      readinessProbe: {}
      # Resource limit/request for Jenkins
      # See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ for details
      resources:
        limits:
          cpu: 2
          memory: 5G
        requests:
          cpu: 500m
          memory: 5G # 2G buffer over heap size, due to possible class-leak
      env: 
      # Enable JMX to allow connecting with profiler locally via port-forwarding
      # Empty Jenkins instance can take ~140MB of Metaspace initially, default size ~20MB
      - name: JENKINS_JAVA_OPTS
        value: >
         -Xmx3G
         -Xms3G
         -XX:MetaspaceSize=256M
         -Dhudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT=true
      envFrom: []
      volumeMounts:
      - name: seed-jobs
        mountPath: /var/jenkins_home/seeds
      - name: common-lib-vars
        mountPath: /var/jenkins_home/common-lib/vars
      - name: build-configs
        mountPath: /var/jenkins_home/build-configs
      - name: build-scripts
        mountPath: /var/jenkins_home/build-scripts
    volumes:
    - name: seed-jobs
      configMap:
        name: jenkins-seed-jobs
        defaultMode: 420
    - name: common-lib-vars
      configMap:
        name: jenkins-common-lib-vars
        defaultMode: 420
    - name: build-configs
      configMap:
        name: jenkins-build-configs
        defaultMode: 420
    - name: build-scripts
      configMap:
        name: jenkins-build-scripts
        defaultMode: 420
    restartPolicy: ""
    imagePullSecrets: []
    hostAliases: []
    podSecurityContext: {}
    affinity: {}
    priorityClassName: "jenkins-priority"
    tolerations: []

  # pvcSettings allows setting PersistentVolumeClaim properties for Jenkins home
  pvcSettings:
  # name of Jenkins Home PVC
  # name: ""

  # accessMode specifies the way Jenkins home Volume can be mounted
  # accessMode: ""

  # resourceStorage is the volume size of Jenkins home Volume
  # resourceStorage: ""

  # storageClassName is the name of the StorageClass required by the claim
  # storageClassName: ""
  # storageClassName: ""

  # pluginsCache allows setting PersistentVolumeClaim properties for plugins cache
  pluginsCache: {}
  # name of plugins cache PVC
  # name: ""

  # accessMode specifies the way the plugins cache can be mounted
  # accessMode: ""

  # resourceStorage is the plugins cache volume size
  # resourceStorage: ""

  # storageClassName is the name of the StorageClass required by the claim
  # storageClassName: ""

  # plugins are plugins required by the user
  # You can define plugins here
  #
  # Example:
  #
  # plugins:
  # - name: jacoco
  #   version: "3.1.1"
  plugins:
    - name: blueocean
      version: "1.25.5"
    - name: timestamper
      version: "1.18"
    - name: ansicolor
      version: "1.0.1"
    - name: parameter-separator
      version: "1.3"
    - name: copyartifact
      version: "1.46.4"
    - name: github-oauth
      version: "0.39"
    - name: matrix-auth
      version: "3.1.3"
    - name: git-client
      version: "3.11.0"
    - name: github
      version: "1.34.3"
    - name: git
      version: "4.11.3"
    - name: kubernetes
      version: "3651.v908e7db_10d06"
    - name: kubernetes-client-api
      version: "5.12.2-193.v26a_6078f65a_9"
    - name: workflow-api
      version: "1164.v760c223ddb_32"
    - name: workflow-aggregator
      version: "581.v0c46fa_697ffd"
    - name: workflow-cps
      version: "2725.v7b_c717eb_12ce"
    - name: workflow-job
      version: "1189.va_d37a_e9e4eda_"
    - name: workflow-durable-task-step
      version: "1155.v79567b_e0a_2de"
    - name: workflow-basic-steps
      version: "948.v2c72a_091b_b_68"
    - name: workflow-support
      version: "820.vd1a_6cc65ef33"
    - name: pipeline-model-definition
      version: "2.2097.v33db_b_de764b_e"
    - name: pipeline-model-api
      version: "2.2097.v33db_b_de764b_e"
    - name: pipeline-stage-tags-metadata
      version: "2.2097.v33db_b_de764b_e"
    - name: pipeline-model-extensions
      version: "2.2097.v33db_b_de764b_e"
    - name: job-dsl
      version: "1.79"
    - name: junit
      version: "1119.1121.vc43d0fc45561"
    - name: script-security
      version: "1175.v4b_d517d6db_f0"
    - name: display-url-api
      version: "2.3.6"
    - name: parameterized-scheduler
      version: "1.1"

  # roles define a list of extra RBAC roles for the Jenkins Master pod service account
  roles: []

  # services allow configuring Jenkins services
  services: {}
#    Http is Jenkins web UI service
#    http:
#      labels are injected into metadata labels field
#      labels: {}
#
#      annotations are injected into metadata annotations field
#      annotations: {}
#
#      Spec describes the attributes that a user creates on a service.
#      spec: {}
#
#    Agent is Jenkins agent service
#    agent:
#      labels are injected into metadata labels field
#      labels: {}
#
#      annotations are injected into metadata annotations field
#      annotations: {}
#
#      Spec describes the attributes that a user creates on a service.
#      spec: {}

  # defines authorization strategy of the operator for the Jenkins API.
  authorizationStrategy: createUser

  # disableCSRFProtection can enable or disable operator built-in CSRF protection
  # Set it to true if you are using OpenShift Jenkins Plugin
  # See https://github.com/jenkinsci/kubernetes-operator/pull/193 for more info
  disableCSRFProtection: false

  # pluginSnapshot creates a configMap containing all the plugins in Jenkins at a particular moment and allows to keep a history of changes and restore
  pluginSnapshot: {}
#    restoreEnabled makes Jenkins use plugins specified in snapshotConfigMapRef
#    restoreEnabled: false
#
#    snapshotConfigMapRef specifies which configMap to use for restore if restoreEnabled is set. Otherwise it will overwrite the configMap whenever plugins change
#    snapshotConfigMapRef:
#      name: "config-map-name"
#
#    snapshotHistoryLength specifies, how many historical snapshots are to be kept. Has no effect if snapshotConfigMapRef is specified
#    snapshotHistoryLength: 3

# jenkinsGroovyScriptsEnabled can enable or disable the JenkinsGroovyScript instances
# Set to false if you have configured CR(s) already and/or you want to deploy an operator only
jenkinsGroovyScriptsEnabled: true

# JenkinsGroovyScripts instances configuration
# JenkinsGroovyScriptSpec defines the desired state of JenkinsGroovyScript. It allows to write Groovy Scripts to modify the Jenkins.
jenkinsGroovyScripts:
  # name of resource
  - name: groovy

    # labels are injected into metadata labels field. Each JenkinsSeedJob Custom Resource need to reference corresponding
    # Jenkins Custom Resource via labels field
    labels:
      carthago.cloud/jenkins: jenkins

    # annotations are injected into metadata annotations field
    annotations: {}

    # data is inline Groovy script
    data: |
      // Set Kubernetes cloud config, cannot use casc, since it would override operator config
      def instance = Jenkins.getInstanceOrNull()
      def k8s = instance?.getCloud("kubernetes")
      k8s?.setMaxRequestsPerHost(128) // default 32
      k8s?.setConnectTimeout(30)      // default 5
      k8s?.setWaitForPodSec(60 * 30)  // default 600
      instance?.save()

      // The directory has to be copied because of lack of write permissions in it
      def oldLibPath="/var/jenkins_home/common-lib"
      def newLibPath="/var/jenkins_home/scripts-repo"
      def logFile=new java.io.File("/var/lib/jenkins/gitInit.log")

      new ProcessBuilder(['bash', '-c', """
        rm -rf $newLibPath && \
        cp -rL $oldLibPath $newLibPath && \
        cd $newLibPath && \
        git init && \
        git config user.name "Scala3 Community Build" && \
        git config user.email "<>" && \
        git add --all && \
        git commit -m "init"
      """] as String[])
      .redirectErrorStream(true)
      .inheritIO()
      .start()
      .waitFor()

    # secretRef is secret reference which allows to inject the secrets into Groovy script code
    #secretRef:
      #name: ""
      #namespace: ""

    # dependsOn is JenkinsGroovyScript reference which determines the order of the Groovy scripts
    #dependsOn:
      #name: ""
      #namespace: ""

# jenkinsSeedJobsEnabled can enable or disable the JenkinsSeedJobs instances
# Set to false if you have configured CR(s) already and/or you want to deploy an operator only
jenkinsSeedJobsEnabled: false

# JenkinsSeedJobs instances configuration
# See https://docs.carthago.cloud/latest-version/getting-started/seedjob-configuration/ for additional info
jenkinsSeedJobs:
  # name of resource
  - name: example

    # labels are injected into metadata labels field. Each JenkinsSeedJob Custom Resource need to reference corresponding
    # Jenkins Custom Resource via labels field
    labels:
      carthago.cloud/jenkins: jenkins

    # annotations are injected into metadata annotations field
    annotations: {}

    # Repository is VCS repository settings
    repository:

      # branch is the repository branch where seed job definitions are stored
      branch: master

      # URL is the repository access URL. Can be SSH or HTTPS.
      url: https://github.com/jenkinsci/kubernetes-operator.git

      # targets is the path from repository root where seed job definitions are stored
      targets: "cicd/jobs/*.jenkins"

      # credentialID is the Kubernetes secret name which stores repository access credentials
      credentialID: ""

      # credentialType is the https://jenkinsci.github.io/kubernetes-credentials-provider-plugin/ credential type (optional)
      # allowed types:
      # "" define none Jenkins credential type
      # "basicSSHUserPrivateKey" basic SSH Jenkins credential type
      # "usernamePassword" define username & password Jenkins credential type
      # "external" defines other credential type
      credentialType: ""

    # agentRef represents a Jenkins Kubernetes Agent Reference. It has enough information to retrieve agent
    # in any namespace
    #agentRef:

      # name is unique within a namespace to reference a secret resource.
      #name:

      # namespace defines the space within which the secret name must be unique.
      #namespace:

    # triggers define circumstances that execute jobs
    triggers:

      # bitbucketTrigger is used for Bitbucket web hooks (optional)
      bitbucketTrigger:
        push: false

      # gitHubTrigger is used for GitHub web hooks (optional)
      gitHubTrigger:
        push: false

      # buildPeriodically is used for scheduled timer trigger (optional)
      buildPeriodically: ""

      # pollSCM is setting for polling changes in SCM (optional)
      pollSCM: ""

    # settings configure the job build options
    settings:

      # ignoreMissingFiles is setting for Job DSL API plugin to ignore files that are missing (optional)
      ignoreMissingFiles: false

      # additionalClasspath is setting for Job DSL API plugin to set Additional Classpath (optional)
      additionalClasspath: ""

      # failOnMissingPlugin is setting for Job DSL API plugin that fails job if required plugin is missing (optional)
      failOnMissingPlugin: false

      # unstableOnDeprecation is setting for Job DSL API plugin that sets build status as unstable if build using deprecated features (optional)
      unstableOnDeprecation: false

# jenkinsConfigurationsAsCodeEnabled can enable or disable the JenkinsConfigurationAsCode instances
# Set to false if you have configured CR(s) already and/or you want to deploy an operator only
jenkinsConfigurationsAsCodeEnabled: true

# JenkinsConfigurationAsCode instances configuration
# For configuration as code creation tutorial, check https://docs.carthago.cloud/latest-version/getting-started/customization/
jenkinsConfigurationsAsCode:
  # name of resource
  - name: casc

    # labels are injected into metadata labels field. Each JenkinsConfigurationAsCode Custom Resource need to reference corresponding
    # Jenkins Custom Resource via labels field
    labels:
      carthago.cloud/jenkins: jenkins

    # annotations are injected into metadata annotations field
    annotations: {}

    # data is inline Groovy script
    data: |
      jenkins:
        systemMessage: |
          Scala 3 Community Build
        crumbIssuer:
          standard:
            excludeClientIPFromCrumb: true
        numExecutors: 0 #
      jobs:
      - file: /var/jenkins_home/seeds/initializeSeedJobs.groovy
      unclassified:
        location:
          url: "https://scala3.westeurope.cloudapp.azure.com/"
        globalLibraries:
          libraries:
            - name: "common-lib"
              defaultVersion: "master"
              implicit: true
              retriever:
                modernSCM:
                  scm:
                    git:
                      id: "common-lib"
                      remote: "/var/jenkins_home/scripts-repo"
            - name: "camunda-community"
              defaultVersion: "main"
              retriever:
                modernSCM:
                  scm:
                    git:
                      remote: "https://github.com/camunda-community-hub/camunda-jenkins-shared-library"
              cachingConfiguration:
                refreshTimeMinutes: 1440
            - name: pipeline-logparser
              defaultVersion: "3.1.2"
              retriever:
                modernSCM:
                  scm:
                    git:
                      remote: "https://github.com/gdemengin/pipeline-logparser"
              cachingConfiguration:
                refreshTimeMinutes: 1440
        gitHubConfiguration:
          apiRateLimitChecker: NoThrottle
        timestamper:
          allPipelines: true

    # secretRef is secret reference which allows to inject the secrets into Configuration As Code script
    #secretRef:
      #name: ""
      #namespace: ""

# jenkinsKubernetesAgentEnabled can enable or disable the JenkinsKubernetesAgent instances
# Set to false if you have configured CR(s) already and/or you want to deploy an operator only
jenkinsKubernetesAgentEnabled: true

# JenkinsKubernetesAgent instances configuration
# In the free plan, only 1 jenkinsKubernetesAgent can be configured, and its name must be equal to seed-job-agent
# For configuration as code creation tutorial, check https://docs.carthago.cloud/latest-version/getting-started/seedjob-configuration/
jenkinsKubernetesAgents:
  # name of resource
  - name: default

    # labels are injected into metadata labels field. Each JenkinsKubernetesAgent Custom Resource need to reference corresponding
    # Jenkins Custom Resource via labels field
    labels:
      carthago.cloud/jenkins: jenkins

    # annotations are injected into metadata annotations field
    annotations: {}

    # PodSpec allows setting Jenkins Kubernetes Agent specific pod properties
    podSpec:
      containers:
        - name: jnlp
          image: jenkins/inbound-agent:4.11.2-4
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: 2Gi
      priorityClassName: "jenkins-priority"

    # Description of Jenkins Agent
    description: ""

    # Executors defines the maximum number of concurrent builds that Jenkins may perform on this node.
    executors: 10

    # RemoteRootDirectory is directory dedicated to Jenkins for temporary files storage purposes.
    remoteRootDirectory: ""

    # Usage controls how Jenkins schedules builds on this node.
    # Available usage options are defined by AgentUsage enum
    usage: ""

    # TunnelConnectionThrough allows to route connection to another host
    # Field allowed values: "HOST:PORT", ":PORT" and "HOST:"
    tunnelConnectionThrough: ""

    # JVMOptions are additional startup arguments for Java Virtual Machine which runs agent
    jvmOptions: ""

    # Roles defines list of extra RBAC roles for the Jenkins Kubernetes Agent pod service account
    roles: []

# JenkinsAuthenticationEnabled can enable or disable the JenkinsAuthentication instance
# Set to true if you want to deploy the resource, set to false if have configured CR(s) already and/or you want to deploy an operator only
jenkinsAuthenticationEnabled: true

# JenkinsAuthentication configuration
# For authentication creation tutorial, check https://docs.carthago.cloud/latest-version/getting-started/authentication/
jenkinsAuthentication:
  # name of resource
  name: authentication

  # labels are injected into metadata labels field. Each JenkinsAuthentication Custom Resource need to reference corresponding
  # Jenkins Custom Resource via labels field
  labels:
    carthago.cloud/jenkins: jenkins

  # annotations are injected into metadata annotations field
  annotations: {}

  # type indicates which authentication provider is set
  type: "githubOAuth"

  # githubOAuth is configuration for GitHub OAuth provider
  githubOAuth:
    # clientID is the client ID you received from GitHub for your OAuth App.
    clientID: "" # set in start-jenkins.sh script

    # clientSecretRef is a secret reference which allows to safely pass into Authorization Spec. Has to contain "clientSecret" key with value of
    # the client secret you received from GitHub for your OAuth App.
    clientSecretRef:
      name: jenkins-github-oauth-secret
      namespace: "" # set in start-jenkins.sh script

    # WebURI used if you are using GitHub Enterprise. The URL to the web UI root of your GitHub installation.
    # The 'https://' or 'http://' part needs to be specified. There should not be any trailing slash (/).
    # By default set to 'https://github.com'. (optional)
    webUri: "https://github.com"

    # APIURI used if you are using GitHub Enterprise. The URI to the API root of your GitHub installation.
    # The 'https://' or 'http://' part needs to be specified. There should not be any trailing slash (/).
    # By default set to 'https://api.github.com'. (optional)
    apiUri: "https://api.github.com"

    # Scopes let you specify exactly what your app is requesting access to. Scopes limit access for OAuth tokens.
    # They do not grant any additional permission beyond that which the user already has.
    # By default these are set to "org:user,user:email" (optional)
    scopes:
      - "read:org"
      - "user:email"

  # googleOAuth is configuration for Google OAuth provider
  googleOAuth:
    # clientID is the client ID you from Google OAuth credentials
    clientID: ""

    # clientSecretRef is a secret reference which allows to safely pass into Authorization Spec. Has to contain "clientSecret" key with value of
    # the client secret from Google OAuth credentials
    clientSecretRef:
      name: ""
      namespace: ""

    # Domain is the public domain of your Jenkins instance. Leave empty for localhost (optional)
    domain: ""

  # openIDConnectAuth is configuration for various authentication providers compliant with OpenID Connect standard.
  # For more information, visit the documentation of the oic-auth: https://github.com/jenkinsci/oic-auth-plugin
  openIDConnectAuth:
    # clientID is the client ID you received from your identity provider
    clientID: ""

    # clientSecretRef is a secret reference which lets you safely pass the client secret to Authentication Spec.
    # The secret has to contain the "clientSecret" key with value of the client secret from OpenID Connect credentials.
    clientSecretRef:
      name: ""
      namespace: ""

    # autoManualConfigure specifies configuration mode. This can be either auto or manual.
    # If set to auto, WellKnownOpenIDConfigurationURL will be required and configuration will be fetched from the
    # well-known configuration endpoint. If set to false, tokenServerURL and authorizationServerURL will be required.
    autoManualConfig: ""

    # WellKnownOpenIDConfigurationURL is an endpoint with well-known configuration endpoint, where your OpenID server
    # publishes its metadata. Required when autoManualConfigure is set to auto, otherwise optional.
    wellKnownOpenIDConfigurationURL: ""

    # Required when autoManualConfigure is set to manual, otherwise optional.
    tokenServerURL: ""

    # Required when autoManualConfigure is set to manual, otherwise optional.
    authorizationServerURL: ""

    # (optional)
    userInfoServerURL: ""

    # (optional)
    userNameField: ""

    # (optional)
    tokenFieldToCheckKey: ""

    # (optional)
    tokenFieldToCheckValue: ""

    # (optional)
    fullNameFieldName: ""

    # (optional)
    emailFieldName: ""

    # scopes are used to specify access privileges while authenticating. It is a string containing space-separated
    # scopes. (optional)
    #
    # Example:
    #
    # scopes: "openid email profile"
    scopes: ""

    # (optional)
    groupsFieldName: ""

    # (optional)
    disableSSLVerification: false

    # logoutFromOpenIDProvider specifies whether to call endSessionEndpoint on logout from Jenkins. (optional)
    logoutFromOpenIDProvider: false

    # endSessionEndpoint is an endpoint to be called on logging out from Jenkins.
    # Required when logoutFromOpenIDProvider is set to true, otherwise optional.
    endSessionEndpoint: ""

    # (optional)
    postLogoutRedirectURL: ""

    # (optional)
    escapeHatchEnabled: false

    # (optional)
    escapeHatchUsername: ""

    # escapeHatchSecretRef is a secret reference which lets you safely pass the escape hatch secret to Authentication Spec.
    # It is required when EscapeHatchEnabled is set to true.
    # The secret has to contain the "escapeHatchSecret" key with value of the client secret from OpenID Connect credentials.
    # Required when escapeHatchEnabled is set to true, otherwise optional.
    escapeHatchSecretRef:
      name: ""
      namespace: ""

    # (optional)
    escapeHatchGroup: ""

  samlAuth:
    # idpMetadata is Identity Provider Metadata in XML format.
    # idpMetadata:

    # idpMetadataURL The Identity Provider metadata file source URL. If you provide idpMetadataURL please add refreshPeriod.
    idpMetadataURL:

    # refreshPeriod in minutes between Identity Provider metadata refreshes. Setting it to 0 disables refreshing metadata.
    refreshPeriod:

    # displayNameAttribute is the name of the attribute that carries the display name (optional)
    displayNameAttribute:

    # groupAttribute is the name of the attribute that carries user groups (optional)
    groupAttribute:

    # maximumAuthenticationLifetime is the number of seconds since the user was authenticated in IdP for which his authentication is considering as active.
    maximumAuthenitcationLifetime:

    # usernameAttribute is the name of the attribute that carries user name which will be used as the Jenkins ID (optional).
    usernameAttribute:

    # emailAttribute is the field name of email attribute in SAML response. (optional)
    emailAttribute:

    # usernameCaseConversion specifies how ID returned from SAML will be converted to the username for Authorization.
    usernameCaseConversion:

    # dataBindingMethod SAML specifies the method of redirection binding that will be used by SAML plugin.
    # The plugin supports HTTP-Redirect and HTTP-POST and by default it uses HTTP-Redirect.
    # Enum: http-post ; http-redirect
    dataBindingMethod:

    # logoutURL is the logout URL of your Identity Provider. Users will be redirected there on logout.
    logoutURL:

    # advancedConfiguration:

      # forceAuthentication specifies whether to request the SAML IdP to force reauthentication of the user,
      # rather than allowing an existing session with the IdP to be reused.
      # (optional) bool
      # forceAuthentication:

      # authenticationContext makes SAML IdP use a specific authentication context instead of its default one.
      # If left empty, default authentication context will be used.
      # (optional)
      # authenticationContext:

      # SPEntityID it overrides the default Entity ID for this Service Provider.
      # (optional)
      # SPEntityID:

      # nameIDPolicyFormat:

    # encryptionConfiguration can be used to specify the keystore details if your provider requires encryption or signing.
    # encryptionConfiguration:

      # keystorePath is the path to the keystore file created with the keygen command.
      # (optional)
      # keystorePath:

      # keystorePassword is the password used in the -storepass argument of the keytool command.
      # (optional)
      # keystorePasswordRef: 

      # privateKeyAlias is the alias used in the -alias argument of the keytool< command.
      # (optional)
      # privateKeyAlias:

      # privateKeyPassword is the password used in the -keypass argument of keytool.
      # (optional)
      # privateKeyPasswordRef:

      # authRequestSignature enables signature of the Redirect Binding Auth Request.
      # If you enable it the encryption and signing key would available in the SP metadata file and URL (JENKINS_URL/securityRealm/metadata).
      # (optional) bool
      # authRequestSignature:

      # wantsAssertionSigned makes authentication accept only signed assertion sent by the IdP.
      # (optional) bool
      # wantsAssertionSigned:

# JenkinsAuthorizationEnabled can enable or disable the jenkinsAuthorization instance
# Set to true if you want to deploy the resource, set to false if have configured CR(s) already and/or you want to deploy an operator only
jenkinsAuthorizationEnabled: true

# JenkinsAuthorization configuration
# For authorization creation tutorial, check https://docs.carthago.cloud/latest-version/getting-started/authorization/
jenkinsAuthorization:
  # name of resource
  name: authorization

  # labels are injected into metadata labels field. Each JenkinsAuthorization Custom Resource need to reference corresponding
  # Jenkins Custom Resource via labels field
  labels:
    carthago.cloud/jenkins: jenkins

  # annotations are injected into metadata annotations field
  annotations: {}

  # type indicates which authorization provider is set
  type: "matrix"

  # Matrix Authorization Strategy
  matrix:
    groups:
        # Scala teams 
        # On prod we use VirtuslabRnD*scala-3-devs, but its a private repo - github auth cannot check it
        # and would report that the given group is missing
        # To check to which groups you're assigned go to <jenkins.url>/whoAmI/
    - name: "scala*virtuslab"
      permissions:
        - Overall/Administer

    - name: "VirtuslabRnD*scala-3-devs"
      permissions:
        - Overall/Administer

    # Operator service team
    - name: VirtuslabRnD*operator-service
      permissions: 
        - Overall/Administer
    
    - name: lampepfl*dotty-core
      permissions:
        - Overall/Read
        - Job/Read
        - Job/Build
        - Job/Cancel
        - Run/Replay
        - Run/Update
    
    # Not logged in users
    users:
    - name: anonymous
      permissions:
        - Overall/Read
        - Job/Discover
        - Job/Read

  # Role-Based Authorization Strategy
  roleBased:
    roles:
      - name: "reader"
        permissions:
          - Overall/Read
        usersOrGroups:
          - anonymous