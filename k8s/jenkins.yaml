# Operator Service for Jenkins Custom Resources Helm chart

# apiVersion is the version of the Custom Resources manifests
apiVersion: operator-service.com/v1beta1

# Jenkins instance configuration
jenkins:
  # enabled can enable or disable the Jenkins instance
  # Set to false if you have configured CR already and/or you want to deploy an operator only
  enabled: true

  # name of resource
  # The pod name will be jenkins-<name> (name will be set as suffix)
  name: jenkins

  # labels are injected into metadata labels field
  #labels: {}

  # annotations are injected into metadata annotations field
  annotations: {}

  # podLabels are injected into Jenkins Controller Pod's metadata labels field
  podLabels: {}

  # podSpec
  podSpec:
    initContainers: []
    sidecars: []
    jenkinsController:
      name: jenkins-controller
      image: jenkins/jenkins:2.319.2-lts
      imagePullPolicy: IfNotPresent
      command: []
      livenessProbe: {}
      readinessProbe: {}
      # Resource limit/request for Jenkins
      # See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ for details
      resources:
        limits:
          cpu: 1500m
          memory: 5Gi
        requests:
          cpu: 1
          memory: 3Gi
      env: []
      envFrom: []
      volumeMounts:
      - name: seed-jobs
        mountPath: /var/jenkins_home/seeds
      - name: common-lib-vars
        mountPath: /var/jenkins_home/common-lib/vars
      - name: build-configs
        mountPath: /var/jenkins_home/build-configs
      - name: build-scripts
        mountPath: /var/jenkins_home/build-scripts
    volumes:
    - name: seed-jobs
      configMap:
        name: jenkins-seed-jobs
        defaultMode: 420
    - name: common-lib-vars
      configMap:
        name: jenkins-common-lib-vars
        defaultMode: 420
    - name: build-configs
      configMap:
        name: jenkins-build-configs
        defaultMode: 420
    - name: build-scripts
      configMap:
        name: jenkins-build-scripts
        defaultMode: 420
    restartPolicy: ""
    imagePullSecrets: []
    hostAliases: []
    podSecurityContext: {}
    affinity: {}
    priorityClassName: ""
    tolerations: []

  # homePVC allows to set PersistentVolumeClaim properties for Jenkins home
  homePVC: {}

  # accessMode specifies the way the plugins cache can be mounted
  # accessMode: ""

  # resourceStorage is the plugins cache volume size
  # resourceStorage: ""

  # storageClassName is the name of the StorageClass required by the claim
  # storageClassName: ""
  # storageClassName: ""

  # pluginsCache allows to set plugins cache specific pvc properties
  pluginsCache: {}

  # accessMode specifies the way the plugins cache can be mounted
  # accessMode: ""

  # resourceStorage is the plugins cache volume size
  # resourceStorage: ""

  # storageClassName is the name of the StorageClass required by the claim
  # storageClassName: ""

  # plugins are plugins required by the user
  # You can define plugins here
  #
  # Example:
  #
  # plugins:
  # - name: jacoco
  #   version: "3.1.1"
  plugins:
    - name: blueocean
      version: "1.25.2"
    - name: depgraph-view
      version: "1.0.5"
    - name: ansicolor
      version: "1.0.1"
    - name: parameter-separator
      version: "1.3"
    - name: copyartifact
      version: "1.46.2"
    - name: github-oauth
      version: "0.37"
    - name: matrix-auth
      version: "3.0.1"
    - name: configuration-as-code
      version: "1.55.1"
    - name: git-client
      version: "3.10.0"
    - name: github
      version: "1.34.1"
    - name: git
      version: "4.10.1"

  # roles defines list of extra RBAC roles for the Jenkins Master pod service account
  roles: []

  # defines authorization strategy of the operator for the Jenkins API
  authorizationStrategy: createUser

  # disableCSRFProtection can enable or disable operator built-in CSRF protection
  # Set it to true if you are using OpenShift Jenkins Plugin
  # See https://github.com/jenkinsci/kubernetes-operator/pull/193 for more info
  disableCSRFProtection: false

# jenkinsGroovyScriptsEnabled can enable or disable the JenkinsGroovyScript instances
# Set to false if you have configured CR(s) already and/or you want to deploy an operator only
jenkinsGroovyScriptsEnabled: true

# JenkinsGroovyScripts instances configuration
# JenkinsGroovyScriptSpec defines the desired state of JenkinsGroovyScript. It allows to write Groovy Scripts to modify the Jenkins.
jenkinsGroovyScripts:
  # name of resource
  - name: groovy

    # labels are injected into metadata labels field. Each JenkinsSeedJob Custom Resource need to reference corresponding
    # Jenkins Custom Resource via labels field
    labels:
      operator-service.com/jenkins: jenkins

    # annotations are injected into metadata annotations field
    annotations: {}

    # data is inline Groovy script
    data: |
      oldLibPath = "/var/jenkins_home/common-lib"
      newLibPath = "/var/lib/jenkins/common-lib"

      // The directory has to be copied because of lack of write permissions in it
      new ProcessBuilder(['bash', '-c', """
        rm -rf $newLibPath && \
        cp -rL $oldLibPath $newLibPath && \
        cd $newLibPath && \
        git init && \
        git config user.name "Scala3 Community Build" && \
        git config user.email "<>" && \
        git add --all && \
        git commit -m "init"
      """] as String[]).start()

    # secretRef is secret reference which allows to inject the secrets into Groovy script code
    #secretRef:
      #name: ""
      #namespace: ""

    # dependsOn is JenkinsGroovyScript reference which determines the order of the Groovy scripts
    #dependsOn:
      #name: ""
      #namespace: ""

# jenkinsSeedJobsEnabled can enable or disable the JenkinsSeedJobs instances
# Set to false if you have configured CR(s) already and/or you want to deploy an operator only
jenkinsSeedJobsEnabled: false

# JenkinsSeedJobs instances configuration
# See https://virtuslabrnd.github.io/operator-service-docs/operator-service-for-jenkins/latest/getting-started/seedjob-configuration/ for additional info
jenkinsSeedJobs:
  # name of resource
  - name: example

    # labels are injected into metadata labels field. Each JenkinsSeedJob Custom Resource need to reference corresponding
    # Jenkins Custom Resource via labels field
    labels:
      operator-service.com/jenkins: jenkins

    # annotations are injected into metadata annotations field
    annotations: {}

    # Repository is VCS repository settings
    repository:

      # branch is the repository branch where seed job definitions are stored
      branch: master

      # URL is the repository access URL. Can be SSH or HTTPS.
      url: https://github.com/jenkinsci/kubernetes-operator.git

      # targets is the path from repository root where seed job definitions are stored
      targets: "cicd/jobs/*.jenkins"

      # credentialID is the Kubernetes secret name which stores repository access credentials
      credentialID: ""

      # credentialType is the https://jenkinsci.github.io/kubernetes-credentials-provider-plugin/ credential type (optional)
      # allowed types:
      # "" define none Jenkins credential type
      # "basicSSHUserPrivateKey" basic SSH Jenkins credential type
      # "usernamePassword" define username & password Jenkins credential type
      # "external" defines other credential type
      credentialType: ""

    # agentRef represents a Jenkins Kubernetes Agent Reference. It has enough information to retrieve agent
    # in any namespace
    #agentRef:

      # name is unique within a namespace to reference a secret resource.
      #name:

      # namespace defines the space within which the secret name must be unique.
      #namespace:

    # triggers define circumstances that execute jobs
    triggers:

      # bitbucketTrigger is used for Bitbucket web hooks (optional)
      bitbucketTrigger:
        push: false

      # gitHubTrigger is used for GitHub web hooks (optional)
      gitHubTrigger:
        push: false

      # buildPeriodically is used for scheduled timer trigger (optional)
      buildPeriodically: ""

      # pollSCM is setting for polling changes in SCM (optional)
      pollSCM: ""

    # settings configures the job build options
    settings:

      # ignoreMissingFiles is setting for Job DSL API plugin to ignore files that are missing (optional)
      ignoreMissingFiles: false

      # additionalClasspath is setting for Job DSL API plugin to set Additional Classpath (optional)
      additionalClasspath: ""

      # failOnMissingPlugin is setting for Job DSL API plugin that fails job if required plugin is missing (optional)
      failOnMissingPlugin: false

      # unstableOnDeprecation is setting for Job DSL API plugin that sets build status as unstable if build using deprecated features (optional)
      unstableOnDeprecation: false

# jenkinsConfigurationsAsCodeEnabled can enable or disable the JenkinsConfigurationAsCode instances
# Set to false if you have configured CR(s) already and/or you want to deploy an operator only
jenkinsConfigurationsAsCodeEnabled: true

# JenkinsConfigurationAsCode instances configuration
# For configuration as code creation tutorial, check https://virtuslabrnd.github.io/operator-service-docs/operator-service-for-jenkins/latest/getting-started/customization/
jenkinsConfigurationsAsCode:
  # name of resource
  - name: casc

    # labels are injected into metadata labels field. Each JenkinsConfigurationAsCode Custom Resource need to reference corresponding
    # Jenkins Custom Resource via labels field
    labels:
      operator-service.com/jenkins: jenkins

    # annotations are injected into metadata annotations field
    annotations: {}

    # data is inline Groovy script
    data: |
      jenkins:
        systemMessage: |
          Scala 3 Community Build
        numExecutors: 1 #
      jobs:
      - file: /var/jenkins_home/seeds/initializeSeedJobs.groovy
      unclassified:
        globalLibraries:
          libraries:
            - defaultVersion: "master"
              implicit: true
              name: "common-lib"
              retriever:
                modernSCM:
                  scm:
                    git:
                      id: "common-lib"
                      remote: "/var/lib/jenkins/common-lib"

    # secretRef is secret reference which allows to inject the secrets into Configuration As Code script
    #secretRef:
      #name: ""
      #namespace: ""

# jenkinsKubernetesAgentEnabled can enable or disable the JenkinsKubernetesAgent instances
# Set to false if you have configured CR(s) already and/or you want to deploy an operator only
jenkinsKubernetesAgentEnabled: true

# JenkinsKubernetesAgent instances configuration
# For configuration as code creation tutorial, check https://virtuslabrnd.github.io/operator-service-docs/operator-service-for-jenkins/latest/getting-started/seedjob-configuration/
jenkinsKubernetesAgents:
  # name of resource
  - name: first-agent

    # labels are injected into metadata labels field. Each JenkinsKubernetesAgent Custom Resource need to reference corresponding
    # Jenkins Custom Resource via labels field
    labels:
      operator-service.com/jenkins: jenkins

    # annotations are injected into metadata annotations field
    annotations: {}

    # PodSpec allows to set Jenkins Kubernetes Agent specific pod properties
    podSpec:
      containers:
        - name: jnlp
          image: jenkins/inbound-agent:4.10-3-alpine
          imagePullPolicy: IfNotPresent

    properties:
      # Description of Jenkins Agent
      description: ""

      # Executors defines the maximum number of concurrent builds that Jenkins may perform on this node.
      executors:

      # RemoteRootDirectory is directory dedicated to Jenkins for temporary files storage purposes.
      remoteRootDirectory: ""

      # Usage controls how Jenkins schedules builds on this node.
      # Available usage options are defined by AgentUsage enum
      usage: ""

      # LaunchMethod controls how Jenkins starts this agent.
      # AgentLaunchMethod is enum that defines the available launch methods
      launchMethod: ""

      # DisableWorkDir allows disabling Remoting Work Directory for the agent.
      disableWorkDir: false

      # CustomWorkDirPath is a custom Remoting work directory will be used instead of the Agent Root Directory
      customWorkDirPath: ""

      # InternalDataDirectory defines a storage directory for the internal data
      # By default it's "remoting"
      internalDataDirectory: ""

      # FailIfWorkspaceIsMissing if true, remoting will fail at startup if the target work directory is missing
      failIfWorkplaceIsMissing: false

      # UseWebSocket uses websocket to connect to the Jenkins Controller rather than the TCP port
      useWebSocket: false

      # TunnelConnectionThrough allows to route connection to another host
      # Field allowed values: "HOST:PORT", ":PORT" and "HOST:"
      tunnelConnectionThrough: ""

      # JVMOptions are additional startup arguments for Java Virtual Machine which runs agent
      jvmOptions: ""

      # Availability controls when Jenkins starts and stops this agent.
      availability: ""

      # ToolLocations is list of tools location
      toolLocations:
        - name: ""
          home: ""

    # RoleRef defines list of extra RBAC roles for the Jenkins Kubernetes Agent pod service account
    roleRef: []

# JenkinsAuthenticationEnabled can enable or disable the JenkinsAuthentication instance
# Set to true if you want to deploy the resource, set to false if have configured CR(s) already and/or you want to deploy an operator only
jenkinsAuthenticationEnabled: true

# JenkinsAuthentication configuration
# For authentication creation tutorial, check https://virtuslabrnd.github.io/operator-service-docs/operator-service-for-jenkins/latest/getting-started/integrating-authentication/
jenkinsAuthentication:
  # name of resource
  name: authentication

  # labels are injected into metadata labels field. Each JenkinsAuthentication Custom Resource need to reference corresponding
  # Jenkins Custom Resource via labels field
  labels:
    operator-service.com/jenkins: jenkins

  # annotations are injected into metadata annotations field
  annotations: {}

  # type indicates which authentication provider is set
  type: "githubOAuth"

  # githubOAuth is configuration for GitHub OAuth provider
  githubOAuth:
    # clientID is the client ID you received from GitHub for your OAuth App.
    clientID: ""

    # clientSecretRef is a secret reference which allows to safely pass into Authorization Spec. Has to contain "clientSecret" key with value of
    # the client secret you received from GitHub for your OAuth App.
    clientSecretRef:
      name: jenkins-github-oauth-secret
      namespace: ""

    # WebURI used if you are using GitHub Enterprise. The URL to the web UI root of your GitHub installation.
    # The 'https://' or 'http://' part needs to be specified. There should not be any trailing slash (/).
    # By default set to 'https://github.com'. (optional)
    webUri: "https://github.com"

    # APIURI used if you are using GitHub Enterprise. The URI to the API root of your GitHub installation.
    # The 'https://' or 'http://' part needs to be specified. There should not be any trailing slash (/).
    # By default set to 'https://api.github.com'. (optional)
    apiUri: "https://api.github.com"

    # Scopes let you specify exactly what your app is requesting access to. Scopes limit access for OAuth tokens.
    # They do not grant any additional permission beyond that which the user already has.
    # By default these are set to "org:user,user:email" (optional)
    scopes:
      - "read:org"
      - "user:email"

  # googleOAuth is configuration for Google OAuth provider
  googleOAuth:
    # clientID is the client ID you from Google OAuth credentials
    clientID: ""

    # clientSecretRef is a secret reference which allows to safely pass into Authorization Spec. Has to contain "clientSecret" key with value of
    # the client secret from Google OAuth credentials
    clientSecretRef:
      name: ""
      namespace: ""

    # Domain is the public domain of your Jenkins instance. Leave empty for localhost (optional)
    domain: ""

  # openIDConnectAuth is configuration for various authentication providers compliant with OpenID Connect standard.
  # For more information, visit the documentation of the oic-auth: https://github.com/jenkinsci/oic-auth-plugin
  openIDConnectAuth:
    # clientID is the client ID you received from your identity provider
    clientID: ""

    # clientSecretRef is a secret reference which lets you safely pass the client secret to Authentication Spec.
    # The secret has to contain the "clientSecret" key with value of the client secret from OpenID Connect credentials.
    clientSecretRef:
      name: ""
      namespace: ""

    # autoManualConfigure specifies configuration mode. This can be either auto or manual.
    # If set to auto, WellKnownOpenIDConfigurationURL will be required and configuration will be fetched from the
    # well-known configuration endpoint. If set to false, tokenServerURL and authorizationServerURL will be required.
    autoManualConfig: ""

    # WellKnownOpenIDConfigurationURL is an endpoint with well-known configuration endpoint, where your OpenID server
    # publishes its metadata. Required when autoManualConfigure is set to auto, otherwise optional.
    wellKnownOpenIDConfigurationURL: ""

    # Required when autoManualConfigure is set to manual, otherwise optional.
    tokenServerURL: ""

    # Required when autoManualConfigure is set to manual, otherwise optional.
    authorizationServerURL: ""

    # (optional)
    userInfoServerURL: ""

    # (optional)
    userNameField: ""

    # (optional)
    tokenFieldToCheckKey: ""

    # (optional)
    tokenFieldToCheckValue: ""

    # (optional)
    fullNameFieldName: ""

    # (optional)
    emailFieldName: ""

    # scopes are used to specify access privileges while authenticating. It is a string containing space-separated
    # scopes. (optional)
    #
    # Example:
    #
    # scopes: "openid email profile"
    scopes: ""

    # (optional)
    groupsFieldName: ""

    # (optional)
    disableSSLVerification: false

    # logoutFromOpenIDProvider specifies whether to call endSessionEndpoint on logout from Jenkins. (optional)
    logoutFromOpenIDProvider: false

    # endSessionEndpoint is an endpoint to be called on logging out from Jenkins.
    # Required when logoutFromOpenIDProvider is set to true, otherwise optional.
    endSessionEndpoint: ""

    # (optional)
    postLogoutRedirectURL: ""

    # (optional)
    escapeHatchEnabled: false

    # (optional)
    escapeHatchUsername: ""

    # escapeHatchSecretRef is a secret reference which lets you safely pass the escape hatch secret to Authentication Spec.
    # It is required when EscapeHatchEnabled is set to true.
    # The secret has to contain the "escapeHatchSecret" key with value of the client secret from OpenID Connect credentials.
    # Required when escapeHatchEnabled is set to true, otherwise optional.
    escapeHatchSecretRef:
      name: ""
      namespace: ""

    # (optional)
    escapeHatchGroup: ""