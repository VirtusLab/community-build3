name: "Prepare Open Community Build"
description: "Ensure compiler version is published, resolve url for custom Maven repository"
inputs:
  scala-version:
    description: "Scala version to check"
  repository-url:
    description: "GitHub repository URL for compiler to build"
    required: true
  repository-branch:
    description: "GitHub repository branch for compiler to build"
    required: true
outputs:
  scala-version:
    description: "Effective Scala version, input value of scala-version if using published version or version of builded compiler"
    value: ${{ steps.calc-version.outputs.effective-scala-version }}
  maven-repo-url:
    description: "Effective Maven repository subdirectory to use"
    value: ${{ steps.calc-version.outputs.effective-maven-url }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository-url }}
        ref: ${{ inputs.repository-branch }}
        path: "compiler"

    - name: Calculate version if missing
      id: calc-version
      shell: bash
      run: |
        scalaVersion=${{ inputs.scala-version }}
        if [[ -z $scalaVersion ]]; then
          cd compiler
          git --no-pager log -1
          commitHash=$(git --no-pager rev-parse --short=7 HEAD | xargs)
          commitDate=$(git --no-pager show -s --format=%cd --date=format:"%Y%m%d" HEAD | xargs)
          baseVersion=$(sbt --no-colors 'eval Build.baseVersion' | grep 'ans: String =' | awk '{ print $5 }' | xargs)
          # `SNAPSHOT` substring is required to treat compiler as experimental
          # All compilers build from branch are treated experimental
          scalaVersion=${baseVersion}-bin-${commitDate}-${commitHash}
        fi

        baseMavenRepo="https://scala3.westeurope.cloudapp.azure.com/maven2"
        buildMavenRepo="${baseMavenRepo}/${scalaVersion}"

        echo "Effective Scala version for this build: $scalaVersion"
        echo "effective-scala-version=${scalaVersion}" >> $GITHUB_OUTPUT

        echo "Effective Maven repository for this build: $buildMavenRepo"
        echo "effective-maven-url=${buildMavenRepo}" >> $GITHUB_OUTPUT

    - name: Install coursier
      uses: coursier/setup-action@v1
      with:
        apps: cs
    - name: Check version is published
      shell: bash
      id: check-published
      run: |
        Version="${{ steps.calc-version.outputs.effective-scala-version }}"
        CustomMavenRepo="${{ steps.calc-version.outputs.effective-maven-url }}"
        isPublished=false
        # Download jar instead of checking only for pom to ensure that it's complete
        if cs fetch org.scala-lang:scala3-compiler_3:${Version} -r $CustomMavenRepo ; then
          isPublished=true
        elif [[ ! -z "${{ inputs.scala-version }}" ]]; then
          echo "::error title=Compiler version unavailable::Requested compiler version ${{ inputs.scala-version }} is unavailable" 
          exit 1
        fi
        echo "Can skip compiler build: ${isPublished}"
        echo "is-compiler-published=${isPublished}" >> $GITHUB_OUTPUT

    - name: Build compiler
      uses: addnab/docker-run-action@v3
      if: steps.check-published.outputs.is-compiler-published == 'false'
      with:
        image: "lampepfl/dotty:2024-10-18"
        options: -v ${{ github.workspace }}/compiler:/compiler/
        shell: bash
        run: |
          echo '##################################'
          echo "Release Scala in version: ${{ steps.calc-version.outputs.effective-scala-version }}"
          echo "Maven repo at: ${{ steps.calc-version.outputs.effective-maven-url }}"
          echo '##################################'
          
          # Extract major and minor version numbers (first two segments)
          major_minor=$(echo "${{ steps.calc-version.outputs.effective-scala-version }}" | grep -oE '^[0-9]+\.[0-9]+')
          major=$(echo "$major_minor" | cut -d. -f1)
          minor=$(echo "$major_minor" | cut -d. -f2)
          echo "Compiler binary version: $major.$minor"

          # If building Scala 3.6 or earlier use Java 8
          JDKVersion=17
          if [[ "$major" -lt 3 ]] || ([[ "$major" -eq 3 ]] && [[ "$minor" -lt 7 ]]); then
            JDKVersion=8
          fi

          echo "Would try to use JDK ${JDKVersion} to build compiler"
          PATH="/usr/lib/jvm/java-${JDKVersion}-openjdk-amd64/bin:$PATH"

          cd /compiler/
          java -version
          sbt \
          'set every publishTo := Some("Community Build Repo" at "${{ steps.calc-version.outputs.effective-maven-url }}")' \
          ';set every version := "${{ steps.calc-version.outputs.effective-scala-version }}"' \
          ';set `scala3-bootstrapped-new`/publishConfiguration := (`scala3-bootstrapped-new`/publishConfiguration).value.withOverwrite(true)'\
          ';scala3-bootstrapped-new/publish'