name: "Build projects"
description: "Used to build a project withing the Open Community Build"
inputs:
  project-name:
    description: "Name of the project to build"
    required: true
  scala-version:
    description: "Scala Version to use"
    required: true
  extra-scalac-options:
    description: "List of scalacOptions which should be used when building projects. Multiple entires should be seperated by a single comma character `,`"
    default: ""
  disabled-scalac-options:
    description: "List of scalacOptions which should be filted out when building projects."
    default: ""
  custom-build-id:
    description: "Custom buildId to use instead of autogenerated github job id"
    default: ""
  # Infrastructure inputs / secrets
  maven-repo-url:
    description: "Custom Maven repository used to store artifacts"
    required: true
  elastic-user:
    description: "Secret with auth user to elasticsearch"
    required: true
  elastic-password:
    description: "Secret with auth token to elasticsearch"
    required: true
  github-key:
    description: "Secret with GitHub SSH eky required to clone repositories/submodules using ssh"
    required: true
  workflow-name:
    description: "Name of the calling workflow, used to resolve build URL. Leave empty to use default (execute-build-plan / {{github.job}} (<project-name>))"
    default: ""
runs:
  using: "composite"
  steps:
    - uses: coursier/cache-action@v6.4
    - uses: coursier/setup-action@v1
      with:
        apps: cs

    - name: Check java version
      shell: bash
      run: |
        ConfigFile=".github/workflows/buildConfig.json"
        DefaultJDK=11
        javaVersion=$(jq -r ".\"${{ inputs.project-name }}\".config.java.version // ${DefaultJDK}" $ConfigFile)
        if [[ $javaVersion -ge 21 && "$scalaVersion" = 3.[0-2].* ]]; then
          echo "Force Java 17, Java 21 is only supported since 3.3.x"
          javaVersion=17
        fi
        echo "java-version=$javaVersion" >> $GITHUB_ENV
        echo "JavaVersion set to $javaVersion"

    - name: Check can skip build
      id: check-history
      shell: bash
      run: |
        ConfigFile=".github/workflows/buildConfig.json"
        URL="https://scala3.westeurope.cloudapp.azure.com/data/project-build-summary/_search"

        canSkip=false
        if [[ -n "${{ inputs.extra-scalac-options }}" || -n "${{ inputs.disabled-scalac-options }}" ]]; then
          echo "Using custom scalacOption, cannot skip"
        else
          projectName="${{ inputs.project-name }}"
          scalaVersion="${{ inputs.scala-version }}"
          projectVersion="$(jq -r ".\"${{ inputs.project-name }}\".version" $ConfigFile)"
            
          # Elasticsearch query JSON
          query='
          {
            "_source": ["projectName", "scalaVersion", "version", "status"],
            "query": {
              "bool": {
                "must": [
                  { "term": { "projectName": "'$projectName'" } },
                  { "term": { "scalaVersion": "'"$scalaVersion"'" } },
                  { "term": { "version": "'"$version"'" } }
                ]
              }
            }
          }'

          # Make the request to Elasticsearch
          response=$(curl -s -u ${{ inputs.elastic-user }}:${{ inputs.elastic-password }} -XPOST -H "Content-Type: application/json" -d "$query" "$URL")

          # Check if the request was successful
          if [ "$(echo "$response" | jq -r '.error')" != "null" ]; then
            echo "Error: Failed to fetch data from Elasticsearch."
            echo "$response"
          else 
            echo "$response" | jq -r '.hits.hits'
            canSkip=$(echo "$response" | jq -r 'any(.hits.hits[]; ._source.status == "success")')
          fi
        fi
        echo "Can skip build: $canSkip"
        echo "can-skip-build=${canSkip}" >> $GITHUB_OUTPUT

    - name: Prepare SSH keys
      shell: bash
      run: |
        echo "${{ inputs.github-key }}" > ${{ github.workspace }}/github_key

    - name: Build project
      uses: addnab/docker-run-action@v3
      if: steps.check-history.outputs.can-skip-build != 'true'
      with:
        image: "virtuslab/scala-community-build-project-builder:jdk${{ env.java-version }}-v0.3.0"
        options: -v ${{ github.workspace }}:/opencb/ -v ${{ github.workspace }}/github_key:/root/.ssh/github_key:ro
        run: |
          # Setup ssh required for downloading submodules
          eval "$(ssh-agent -s)"
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add ~/.ssh/github_key

          DefaultConfig='{}'
          ConfigFile="/opencb/.github/workflows/buildConfig.json"
          config () { 
            path=".\"${{ inputs.project-name }}\"$@" 
            jq -c -r "$path" $ConfigFile 
          }

          touch build-logs.txt  build-summary.txt
          # Assume failure unless overwritten by a successful build
          echo 'failure' > build-status.txt 
          echo 'unknown' > build-tool.txt

          /build/build-revision.sh \
            "$(config .project)" \
            "$(config .repoUrl)" \
            "$(config .revision)" \
            "${{ inputs.scala-version }}" \
            "$(config .version)" \
            "$(config .targets)" \
            "${{ inputs.maven-repo-url }}" \
            '1.6.2' \
            "$(config .config // ${DefaultConfig})" \
            "${{ inputs.extra-scalac-options }}" \
            "${{ inputs.disabled-scalac-options }}" 2>&1 | tee build-logs.txt

          # Store results
          mv build-logs.txt /opencb/
          mv build-status.txt /opencb/
          mv build-summary.txt /opencb/
          mv build-tool.txt /opencb/

    - name: Check status
      id: check-status
      shell: bash
      if: steps.check-history.outputs.can-skip-build != 'true'
      run: echo "status=$(cat build-status.txt)" >> $GITHUB_OUTPUT

    - name: Get current job URL
      id: job-info
      if: steps.check-status.outputs.status != 'success'
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        GITHUB_API="repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs"
        JOB_NAME="execute-build-plan / ${{ github.job }} (${{ inputs.project-name }})"
        if [[ "${{ inputs.workflow-name }}" != "" ]]; then
          JOB_NAME="${{ inputs.workflow-name }}"
        fi
        PARAMS="?per_page=100"
        SELECT_URL=".jobs | map(select(.name == \"${JOB_NAME}\")) | .[0].html_url"

        set -o pipefail

        outFile="gh.out"
        buildURL=""
        for i in $(seq 1 10) ;do
          if gh api "${GITHUB_API}${PARAMS}" --paginate --jq "${SELECT_URL}" 2>&1 | tee $outFile; then 
            buildURL="$(cat $outFile | xargs)"
            break
          elif grep -q 'API rate limit exceeded' "$outFile"; then
            echo "GitHub API rate limit exceeded, skip resolving build URL"
            break
          elif grep -q 'Server Error (HTTP 502)' "$outFile"; then
            echo "Server error when resolving build URL, retry with backoff"
            sleep 5
          else 
            echo "Unknown error when resolving build URL:"
            cat $outFile
            break
          fi
        done  

        echo "Build URL: $buildURL"
        echo "build-url=${buildURL}" >> $GITHUB_OUTPUT

    - name: Index results
      uses: addnab/docker-run-action@v3
      if: steps.check-history.outputs.can-skip-build != 'true'
      with:
        image: "virtuslab/scala-community-build-project-builder:jdk${{ env.java-version }}-latest"
        options: -v ${{ github.workspace }}:/opencb/ -e  ELASTIC_USERNAME=${{ inputs.elastic-user }} -e ELASTIC_PASSWORD=${{ inputs.elastic-password }}
        run: |
          ConfigFile="/opencb/.github/workflows/buildConfig.json"
          config () { 
            path=".\"${{ inputs.project-name }}\"$@" 
            jq -c -r "$path" $ConfigFile 
          }

          cd /opencb/

          # Remove ASCII coloring from the indexed logs
          cat build-logs.txt | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g" > build-logs-uncolored.txt 

          /build/feed-elastic.sh \
            'https://scala3.westeurope.cloudapp.azure.com/data' \
            "${{ inputs.project-name }}" \
            "$(cat build-status.txt)" \
            "$(date --iso-8601=seconds)" \
            build-summary.txt \
            build-logs-uncolored.txt \
            "$(config .version)" \
            "${{ inputs.scala-version }}" \
            "${{ inputs.custom-build-id != '' && inputs.custom-build-id || github.run_id }}" \
            "${{ steps.job-info.outputs.build-url }}" \
            "$(cat build-tool.txt)"
          if [ $? != 0 ]; then 
            echo "::warning title=Indexing failure::Indexing results of ${{ inputs.project-name }} failed" 
          fi

    - name: Check results
      shell: bash
      if: steps.check-history.outputs.can-skip-build != 'true'
      run: |
        # Set the result of the build
        if [[ "${{ steps.check-status.outputs.status }}" == "success" ]]; then 
          echo "Build successful"
        else 
          echo "Build failure! Check logs for details"
          exit 1
        fi
