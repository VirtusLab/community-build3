# Content of this file is expected to be moved into actual projects in the future
7mind_izumi {
  source-patches = [
   { 
    path = "project/Deps.sc"
    pattern      = "val scala300 = ScalaVersion\\((.*)\\)"
    replace-with = "val scala300 = ScalaVersion(\"<SCALA_VERSION>\")"
   },{
    path = "distage/distage-core/src/test/scala/izumi/distage/impl/FunctoidTest.scala"
    pattern      = """assertCompiles("Functoid.apply(defimplicitfn _)")"""
    replace-with = """assertCompiles("Functoid.apply(defimplicitfn)")"""
   },{
    path = "distage/distage-core/src/test/scala/izumi/distage/impl/FunctoidTest.scala"
    pattern      = """assertCompiles("Functoid.apply(defconfannfn _)")"""
    replace-with = """assertCompiles("Functoid.apply(defconfannfn)")"""
    },{
    path = "distage/distage-core/src/test/scala/izumi/distage/impl/FunctoidTest.scala"
    pattern      = """assertCompiles("Functoid.apply(defconfannfn2 _)")"""
    replace-with = """assertCompiles("Functoid.apply(defconfannfn2)")"""    
   },{
    path = "distage/distage-testkit-scalatest/src/main/scala-3/izumi/distage/testkit/scalatest/SpecWiring.scala"
    pattern      = """Spec1[F]()(app.tagK, defaultModule)"""
    replace-with = """Spec1[F](using app.tagK, defaultModule)"""    
   },{
    path = "distage/distage-testkit-scalatest/src/test/scala/izumi/distage/testkit/distagesuite/integration/IntegrationTest1Test.scala"
    pattern      = """Spec1[F0]()(f0Tag, implicitly)"""
    replace-with = """Spec1[F0](using f0Tag, implicitly)"""    
   }
  ]
  projects.exclude = [
    "io.7mind.izumi%idealingua-v1-runtime-rpc-csharp",
    "io.7mind.izumi%idealingua-v1-runtime-rpc-typescript",
    "io.7mind.izumi%idealingua-v1-test-defs",
    "io.7mind.izumi%idealingua-v1-runtime-rpc-http4s",
    "io.7mind.izumi%idealingua-v1-runtime-rpc-scala",
    "io.7mind.izumi%idealingua-v1-runtime-rpc-go",
    "io.7mind.izumi%idealingua-v1-model"
  ]
  sbt.options = ["-Dizumi.distage.plancheck.only-warn=true"]
  sbt.commands = [
    # Invalid -rewrite patch
    """set `fundamentals-bio`/Test/unmanagedSources/excludeFilter ~= { _ || "SyntaxTest.scala" }"""
  ]

}

aaronp_args4c{
  source-patches = [{ 
    path = "src/test/scala/args4c/SecureConfigTest.scala"
    pattern      = ") _\n"
    replace-with = ")\n"
   }]
}
aaronp_code-template.tests=compile-only # uses sript engine factory to work with repl, breaks in RC releases 
absaoss_absa-shaded-jackson-module-scala.tests = disabled # Does not compile in any version
ablearthy_tdjson-bind.tests = disabled # cannot build native library
ajozwik_protoquill-generic {
  tests = compile-only
}

akka_akka {
  // Based on Scala3 managed community build
  sbt.commands = ["set every targetSystemJdk := true"]
}
akka_akka-http {
  source-patches = [{
    path = "akka-http-core/src/main/scala/akka/http/impl/engine/ws/WebSocket.scala"
    pattern      = "case b: BypassEvent with MessagePart"
    replace-with = "case b: (BypassEvent & MessagePart)",
  },{
    path = "akka-http-core/src/main/scala/akka/http/scaladsl/model/HttpMessage.scala"
    pattern      = "headers[T](ClassTag[T](headerClass)).asJava"
    replace-with = "headers[T](using ClassTag[T](headerClass)).asJava" 
  },{
    path = "akka-http-core/src/main/scala/akka/http/scaladsl/model/HttpMessage.scala"
    pattern      = "for (`Cookie`(cookies) <- headers"
    replace-with = "for (case `Cookie`(cookies) <- headers" 
  }]
  tests = compile-only
}
akka_akka-persistence-r2dbc.tests = compile-only
alejandrohdezma_http4s-munit {
  sbt.commands = [
    // Does not compile with any version of Scala 3
    """set `http4s-munit`/Test/unmanagedSources/excludeFilter ~= {_ || "Http4sTestHttpRoutesSuiteSuite.scala" || "Http4sTestAuthedRoutesSuiteSuite.scala" }"""
  ]
}
alexarchambault_mill-native-image {
  source-patches = [{
    path = "build.mill.scala"
    pattern      = """version3: String = "3\..*""""
    replace-with = """version3: String = "<SCALA_VERSION>""""
  }]
}
almond-sh_almond{
  projects.exclude = ["sh.almond%toree-hooks"]
}
andimiller_cats-parse-interpolator {
  sbt.commands = [
    """codegenJVM/run"""
  ]
  source-patches = [{
    path = "codegen/src/main/scala/SyntaxGen.scala"
    pattern      = " $input match {"
    replace-with = " ($input: @scala.unchecked) match {" 
  }]
}
apache_pekko {
  sbt.commands = ["set every targetSystemJdk := true"]
  source-patches = [{
    path = "plugins/serialversion-remover-plugin/src/main/scala/org/apache/pekko/Plugin.scala"
    pattern      = "def init(options: List[String]): List[PluginPhase]"
    replace-with = "override def init(options: List[String]): List[PluginPhase]" 
  }]
}
apache_pekko-grpc{
  projects.exclude = [
    // Build issue https://github.com/apache/incubator-pekko-grpc/commit/53f91e8efb0416831483c34ad9ee9c2cccc11d8d#r131335358
    "org.apache.pekko%pekko-grpc-codegen"
  ]
}
apache_pekko-http {
  projects.exclude = [
    # Scalafix supports only Scala2
    "pekko-http-scalafix-rules","pekko-http-scalafix-tests",
    "http-scalafix-test-input", "http-scalafix-test-output",
    # Build issue requires Scalafix
    "pekko-http-tests",  "pekko-http-docs"
  ]
  source-patches = [{
    path = "http-core/src/main/scala/org/apache/pekko/http/impl/engine/ws/WebSocket.scala"
    pattern      = "case b: BypassEvent with MessagePart"
    replace-with = "case b: (BypassEvent & MessagePart)" 
  },{
    path = "http-core/src/main/scala/org/apache/pekko/http/scaladsl/model/HttpMessage.scala"
    pattern      = "headers[T](ClassTag[T](headerClass)).asJava"
    replace-with = "headers[T](using ClassTag[T](headerClass)).asJava" 
  }]
}
apache_pekko-connectors{
  source-patches = [{ 
    path = "project/Dependencies.scala"
    pattern      = "libraryDependencies := "
    replace-with = "libraryDependencies ++= " 
  },{ 
    path = "google-cloud-bigquery/src/main/scala/org/apache/pekko/stream/connectors/googlecloud/bigquery/BigQueryException.scala"
    pattern      = """: @nowarn("msg=match may not be exhaustive")"""
    replace-with = """: @unchecked""" 
  },{ 
    path = "google-cloud-pub-sub-grpc/src/test/scala/docs/scaladsl/ExampleApp.scala"
    pattern      = """: @nowarn("msg=match may not be exhaustive")"""
    replace-with = """: @unchecked""" 
  },{ 
    path = "s3/src/test/scala/docs/scaladsl/S3SourceSpec.scala"
    pattern      = """: @nowarn("msg=match may not be exhaustive")"""
    replace-with = """: @unchecked""" 
  }]
}
apache_pekko-management {
  source-patches = [{
    path = "build.sbt"
    pattern      = "libraryDependencies :="
    replace-with = "libraryDependencies ++=" 
  }]
}
apache_pekko-persistence-r2dbc.tests = compile-only
arainko_ducktape {
  source-version = 3.3
}
armanbilge_litter.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
armanbilge_feral.projects.exclude = [
  // Not present in the repo
  "com.armanbilge%feral-lambda-events",
  "com.armanbilge%feral-lambda-natchez",
  "com.armanbilge%feral-lambda-api-gateway-proxy-http4s",
  "com.armanbilge%feral-core"
]
armanbilge_gcp4s {
  # Needs reordeding of given instances (since 3.4), fails to compile under -source:3.4
  sbt.commands = ["""set bigQuery.jvm/Test/unmanagedSources/excludeFilter ~= { _ || "EndToEndSuite.scala" }"""]
}
armanbilge_van-cats.source-version=3.4 // override -source:future
arturopala_gitignore {
  source-patches = [{ 
    path = ".{sbtopts,jvmopts}"
    pattern      = "(-J)?-XX:\\+CMSClassUnloadingEnabled"
    replace-with = ""
  }]
}
ashwinbhaskar_sight-scala.sbt.commands = [
   """set root/Test/unmanagedSources/excludeFilter ~= { _ || "IntegrationTest.scala" }"""
]
atnos-org_eff {
  sbt.commands = [
    """set monixJVM/Test/unmanagedSources ~= (_.filterNot(_.getName == "TaskEffectSpec.scala"))"""
  ]
}
augustjune_canoe {
  sbt.commands = [
    """set core.jvm/Test/unmanagedSources/excludeFilter ~= { _ || "BroadcastSpec.scala" || "BotSpec.scala" }"""
  ]
}
autodeployai_pmml4s {
  source-patches = [{
    path = "src/test/scala/org/pmml4s/metadata/AttributeTest.scala"
    pattern      = """values=DataVal.from(Array("""
    replace-with = """values=DataVal.from(Array[Any]("""
  },{
    path = "src/test/scala/org/pmml4s/transformations/MapValuesTest.scala"
    pattern      = """Array(null)"""
    replace-with = """Array[Any](null)"""
  }]
}

babylonhealth_lit-fhir{
  tests = disabled // does not compile
  source-patches = [{
    path = "generator/src/main/scala/com/babylonhealth/lit/languages/ScalaCodegen.scala"
    pattern      = " _).tupled"
    replace-with = ").tupled" 
  }]
}
benhutchison_scalaswingcontrib.tests = disabled // Does not compile with any Scala version
beangle_doc {
  sbt.commands = ["styleFormat"] // Was failing due to missing license header in v0.1.7
}
bilal-fazlani_circe-json-schema.tests = compile-only // Missing test files at runtime
bitlap_rolls {
  source-patches = [{ 
      path = "rolls-compiler-plugin/src/main/scala/bitlap/rolls/compiler/plugin/RollsCompilerPlugin.scala"
      pattern      = "def init(options: List[String]): List[PluginPhase]"
      replace-with = "override def init(options: List[String]): List[PluginPhase]" 
    }]
}

bitmarck-service_fs2-secon.projects.exclude=["de.bitmarck.bms%http4s-secon"] // not found

carlos-verdes_zio-arangodb.source-version=3.4-migration
carueda_tscfg.sbt.commands = ["genCode"]
cchantep_acolyte {
  source-patches = [{ 
    path = ".jvmopts"
    pattern      = "-XX:+CMSClassUnloadingEnabled"
    replace-with = ""
  }]
}
cequence-io_openai-scala-client{
  tests = compile-only  
}
cheleb_zio-pravega {
  tests = compile-only // uses Docker
  sbt.commands = [
    """set pravega/Test/unmanagedSources/excludeFilter ~= {_ || "CreateResourcesExample.scala" }""", // error in sourceu
  ]
}
chipsalliance_chisel {
    source-patches = [{ 
    path = "build.mill"
    pattern      = "CrossVersions = "
    replace-with = "CrossVersions = Seq(\"<SCALA_VERSION>\") ++ " 
  }]
}
circe_circe {
  source-patches = [{ 
    path = "modules/core/shared/src/main/scala-3/io/circe/derivation/ConfiguredDecoder.scala"
    pattern      = "case cd: ConfiguredDecoder[?] with SumOrProduct"
    replace-with = "case cd: (ConfiguredDecoder[?] & SumOrProduct)" 
  },{ 
    path = "modules/core/shared/src/main/scala-3/io/circe/derivation/ConfiguredEncoder.scala"
    pattern      = "case ce: ConfiguredEncoder[?] with SumOrProduct"
    replace-with = "case ce: (ConfiguredEncoder[?] & SumOrProduct)" 
  },{ 
    path = "project/Boilerplate.scala"
    pattern      = "CodecTests[Cc$arity](Cc$arity."
    replace-with = "CodecTests[Cc$arity](using Cc$arity." 
  }]
  sbt.commands = [
    # Cyclic given failing since 3.5
    """set tests.jvm/Test/unmanagedSources/excludeFilter ~= { _ || "FromProductSuite.scala" }"""
  ]
}
clevercloud_pulsar4s {
  source-patches = [{ 
    path = "project/plugins.sbt"
    pattern      = """addSbtPlugin("com.github.sbt" % "sbt-ci-release" % "1.9.3+0-8f89fa50+20250524-0110-SNAPSHOT")"""
    replace-with = """addSbtPlugin("com.github.sbt" % "sbt-ci-release" % "1.11.1")"""
  }]
}
coralogix_zio-k8s{
  projects.overrides {
    // Does not compile, quicklens source compat
    zio-k8s-client-quicklens.tests = disabled
  }
}
cornerman_sloth{
  sbt.commands = ["mapScalacOptions -experimental"]
}	
com-lihaoyi_fastparse{
  projects.exclude = ["com.lihaoyi%pythonparse"] // Needs python
}
com-lihaoyi_mill{
  source-patches = [{
    path = "mill-build/src/millbuild/Deps.scala"
    pattern      = """val scalaVersion = "3\..*\""""
    replace-with = """val scalaVersion = "<SCALA_VERSION>" """
  }]
} 
com-lihaoyi_mill-moduledefs{
  # Required to make cross modules to work correctly
  source-patches = [{
    path = "build.sc"
    pattern      = """val scala3Versions = Seq\("3\..*"\)"""
    replace-with = """val scala3Versions = Seq("<SCALA_VERSION>")"""
  }]
} 
com-lihaoyi_scalatags{
  source-patches = [{
    # Changed sematnics since 3.4
    path = "scalatags/test/src/scalatags/TestUtil.scala"
    pattern      = "for (Seq(a, b) <- x.grouped(2)) {"
    replace-with = "for (case Seq(a, b) <- x.grouped(2)) {"
  }]
}
coursier_class-path-util.tests = compile-only // no tests, scala-cli
coursier_sbt-coursier{
  sbt.commands = ["set every scalafixOnCompile := false"]
}
com-lihaoyi_utest {
  source-patches = [{ 
    path = "utest/src-3/utest/asserts/Asserts.scala"
    pattern      = "utest.asserts.Asserts.interceptImpl[T](x)(ClassTag(${clazz.asExprOf[Class[T]]})) }, exprs)"
    replace-with = "utest.asserts.Asserts.interceptImpl[T](x)(using ClassTag(${clazz.asExprOf[Class[T]]})) }, exprs)" 
  }]
}

danslapman_morphling{
  projects.exclude = [morphling-circe] // Needs update due to source compatible change
}
dapperware_dappermongo.tests = compile-only // test containers
databricks_sjsonnet {
  source-patches = [{
    path = "sjsonnet/src/sjsonnet/StaticOptimizer.scala"
    pattern      = ": Val with Expr"
    replace-with = ": (Val & Expr)"
  }]
}
davenverse_fuuid {
  sbt.commands = [
    // Disable intergration tests using test containers
    """set doobie/Test/unmanagedSources/excludeFilter ~= {_ || "PostgresInstanceSpec.scala" || "PostgresTraversalSpec.scala"} """ 
  ]
}

delimobil_fs2-hbase.tests = disabled // Does not compile with any Scala version
devsisters_shardcake {
  source-patches = [{
    path = "protocol-grpc/src/main/scala/com/devsisters/shardcake/GrpcPods.scala"
    pattern      = """\[PodAddress, \(ShardingServiceClient, Fiber\[Throwable, Nothing\]\)\]"""
    replace-with = "[PodAddress, (ShardingServiceClient, Fiber[Throwable, Any])]"
  }]
}
dfianthdl_dfhdl {
  source-patches = [{
    path = "build.sbt"
    pattern      = "val compilerVersion = .*"
    replace-with = "val compilerVersion = \"<SCALA_VERSION>\""
  }]
}
dieproht_molly {
  source-patches = [{
    path = "molly-core/src/test/scala/molly/core/TestContainerForAll.scala"
    pattern      = "(using f: Sync[F])"
    replace-with = ""
  },{
    path = "molly-core/src/test/scala/molly/core/TestContainerForAll.scala"
    pattern      = "f.blocking"
    replace-with = "summon[Sync[F]].blocking"
  }]
}
disneystreaming_alloy {
  source-patches = [{
    path = "build.sc"
    pattern      = """"3" -> "3\.\d\.\d""""
    replace-with = """"3" -> "<SCALA_VERSION>""""
  }]
}
disneystreaming_smithy4s {
  projects.overrides {
    // Infinite loop in OperationSpec
  }
}
disneystreaming_smithy-translate {
  source-patches = [{
    path = "buildSetup.sc"
    pattern      = "case ZincWorkerUtil.DottyVersion(\"0\","
    replace-with = "case ZincWorkerUtil.Scala3Version("
  }]
}
disneystreaming_weaver-test {
  sbt.options=["-Dcommunitybuild.dualVersion=minor:+1"]
}
doriordan_skuber{
  source-patches = [{
    path = "core/src/main/scala/skuber/model/ResourceSpecification.scala"
    pattern      = "this copy("
    replace-with = "this.copy("
  }]
}

earogov_ordset{
  source-patches = [{ 
    path = "build.sc"
    pattern      = """"-comment-syntax", "wiki""""
    replace-with = """"-comment-syntax:wiki""""
   }]
  projects.overrides {
    ordset.tests = disabled // https://github.com/scala/scala3/issues/15820 does not compile
  }
}
eed3si9n_ifdef {
  source-patches = [{ 
    path = "compiler-plugin/src/main/scala-3/IfDefPlugin.scala"
    pattern      = "def init(options: List[String]): List[PluginPhase]"
    replace-with = "override def init(options: List[String]): List[PluginPhase]" 
  }]
}

epfl-lara_lisa{
  projects.exclude=["scallion", "scallion-examples", "scallion-benchmarks"]
  tests = compile-only // exit on failure
  
  source-patches = [{ 
    path = "build.sbt"
    pattern      = "ThisBuild / semanticdbVersion := scalafixSemanticdb.revision"
    replace-with = "// ThisBuild / semanticdbVersion := scalafixSemanticdb.revision" 
  }]

}
endpoints4s_endpoints4s {
  source-patches = [{
    path = "project/Versioning.scala"
    pattern      = """val rawVersion = lastVersion(module, crossVersion, scalaBinaryVersion, scalaFullVersion)"""
    replace-with = """val rawVersion = lastVersion(module, crossVersion, scalaBinaryVersion, scalaFullVersion).stripSuffix("+n")""" 
  }]
}
estrondo_farango {
  source-patches = [{
      path = "core/src/test/scala/one/estrondo/farango/DefaultTestTypeClasses.scala"
      pattern      = "summon[Factory[_, I[_]]]"
      replace-with = "summon[Factory[Any, I[Any]]]" 
  }]
}
erikerlandson_coulomb {
  projects.exclude = ["com.manyangled%coulomb-docs"] // Fails in scaladoc, needs SN nscplugin which might not be published yet
}
etorreborre_specs2 {
  projects{
    exclude = ["specs2-guide", "specs2-cats", "specs2-scalaz", "xml"]
    overrides {
    }
  }
}

fd4s_fs2-kafka{
  sbt.commands = [
    // Disable intergration tests using test containers
    """set core/Test/unmanagedSources/excludeFilter ~= {_ || "KafkaProducerConnectionSpec.scala" || "KafkaConsumerSpec.scala" || "KafkaProducerSpec.scala" || "TransactionalKafkaProducerSpec.scala" || "TransactionalKafkaProducerTimeoutSpec.scala" || "KafkaAdminClientSpec.scala"} """
  ]
}
finos_morphir-jvm {
  source-patches = [{
      path = "mill-build/src/millbuild/CommonCrossScalaModule.scala"
      pattern      = "\"-Xfatal-warnings\""
      replace-with = "" 
  }]
}
fmonniot_scala3mock {
  sbt.commands = ["mapScalacOptions -experimental"]
}
fommil_jzon{
  source-patches = [{ 
      path = "project/CodeGen.scala"
      pattern      = " st match {"
      replace-with = " (st: @scala.unchecked) match {" 
    }]
}  
frawa_typed-json.projects.overrides {
  typed-json.tests = disabled // tries to read non-existing file
}
tkrs_orcus{
  sbt.commands = ["set every scalafixOnCompile := false"]
}

tpunder_fm-serializer {
  sbt.commands = ["mapScalacOptions -experimental"]
  source-patches = [
    { 
      path = "src/main/scala-3/fm/serializer/MacroHelpers.scala"
      pattern      = "ClassDef(readFunCls, List(TypeTree.of[Function1[FieldInput, T]]), List(readFunDef))"
      replace-with = "ClassDef(readFunCls, List(TypeTree.of[Object], TypeTree.of[Function1[FieldInput, T]]), List(readFunDef))" 
    },
    { 
      path = "src/main/scala-3/fm/serializer/MacroHelpers.scala"
      pattern      = "ClassDef(writeFunCls, List(TypeTree.of[Function2[FieldOutput, T, Unit]]), List(writeFunDef))"
      replace-with = "ClassDef(writeFunCls, List(TypeTree.of[Object], TypeTree.of[Function2[FieldOutput, T, Unit]]), List(writeFunDef))" 
    },
    {
      path = "/src/main/scala/fm/serializer/JavaIterableSerializer.scala"
      pattern      = "case list: JavaList[T] with JavaRandomAccess"
      replace-with = "case list: (JavaList[T] & JavaRandomAccess)" 
    }
  ]
}	

gapt_gapt{
  source-patches = [{ 
    path = "core/src/main/scala/gapt/proofs/gaptic/core.scala"
    pattern      = "def flatMap[U](func: Val => Tactic[U]): Tactic[U] ="
    replace-with = "def map[U](func: Val => U): Tactic[U] = ???\n    def /*adapted*/ flatMap[U](func: Val => Tactic[U]): Tactic[U] =" 
  },{
    path = "core/src/main/scala/gapt/provers/viper/aip/axioms/StandardInductionAxioms.scala"
    pattern      = " orElse "
    replace-with = " `orElse` "
  },{
    path = "core/src/main/scala/gapt/provers/viper/aip/axioms/StandardInductionAxioms.scala"
    pattern      = " andThen "
    replace-with = " `andThen` "
  },{
    path = "core/src/main/scala/gapt/formats/tip/util/Substitution.scala"
    pattern      = "substitution.filter { case (v, t) => predicate(v, t) } toSeq: _*"
    replace-with = "(substitution.filter { case (v, t) => predicate(v, t) }.toSeq)*"
  },{
    path = "core/src/main/scala/gapt/grammars/lgg.scala"
    pattern      = "(fa(as_ : _*), s_.flatten.headOption)"
    replace-with = "(fa(`as_`*), s_.flatten.headOption)"
  }]
}
gchudnov_mindthegap{
  source-patches = [
    { 
      path = "mtg/src/main/scala/com/github/gchudnov/mtg/internal/domain/AnyDomain.scala"
      pattern      = "Ordering[T]()(using "
      replace-with = "Ordering[T](using " 
    }
  ]
}
gchudnov_swearwolf.sbt.commands = ["disableFatalWarnings"]
geirolz_fly4s.tests = compile-only // flaky
geirolz_advxml{
  source-patches = [
    { 
      path = "core/src/test/scala/advxml/data/DataConvertInstancesTest.scala"
      pattern      = " As "
      replace-with = " `As` " 
    }]
}
geirolz_secret.source-version=3.4 // implicts
geirolz_toolkit {
  # Misconfigured project
  sbt.commands = ["""set examples/scalacOptions -= "-language:strictEquality" """]
  source-patches = [
    { 
      path = "examples/src/main/scala/com/geirolz/example/app/AppMain.scala"
      pattern      = ".withLogger(Slf4jLogger.create[IO])"
      replace-with = ".withLogger(_ => Slf4jLogger.create[IO])" 
    },
    { 
      path = "examples/src/main/scala/com/geirolz/example/app/AppConfig.scala"
      pattern      = "case class HttpServerConfig(port: Port, host: Hostname)"
      replace-with = "import AppConfig.given\ncase class HttpServerConfig(port: Port, host: Hostname) derives Encoder" 
    },
    { 
      path = "examples/src/main/scala/com/geirolz/example/app/AppConfig.scala"
      pattern      = "case class KafkaBrokerSetting(host: Hostname)"
      replace-with = "case class KafkaBrokerSetting(host: Hostname) derives Encoder" 
    }
  ]
}
gemini-hlsw_gsp-graphql.tests = compile-only // uses Docker
gemini-hlsw_lucuma-schemas {
  sbt.commands = ["set every scalafixOnCompile := false"]
}
gochaorg_json4s3 {
  source-patches = [
    { 
      # Unused import
      path = "src/test/scala/xyz/cofe/json4s3/stream/token/LexerTest.scala"
      pattern      = "import scala.annotation.newMain"
      replace-with = "" 
    }
  ]
}
greenfossil_commons-i18n{
  java.version = 21
}	
greenfossil_data-mapping.source-version=3.3
getkyo_kyo {
  java.version = 21
  sbt.commands = [
    "mapScalacOptions -Ykind-projector"
  ]
}
guntiso_mojoz {
  source-patches = [{ 
      path = "build.sbt"
      pattern      = """sys.error("Java 11 is required for this project"""
      replace-with = """println("Java 11 is required for this project"""
    }]
}
guntiso_querease {
  source-patches = [
    { 
      path = "build.sbt"
      pattern      = """LocalProject("querease")"""
      replace-with = "ThisBuild" 
    },{ 
      path = "build.sbt"
      pattern      = """sys.error("Java 11 is required for this project"""
      replace-with = """println("Java 11 is required for this project"""
    },{
      path = "src/QuereaseMetadata.scala"
      pattern      = "protected lazy val resourceLoader: String => InputStream = getClass.getResourceAsStream _"
      replace-with = "protected lazy val resourceLoader: String => InputStream = getClass.getResourceAsStream(_)" 
    },{
      path = "src/QuereaseExpressions.scala"
      pattern      = "\\n\\s+with "
      replace-with = " & " 
    },{
      path = "src/QuereaseFilters.scala"
      pattern      = "\\n\\s+with "
      replace-with = " & " 
    },{
      path = "src/QuereaseMetadata.scala"
      pattern      = "\\n\\s+with "
      replace-with = " & " 
    }
  ]
}
guymers_ceesvee {
  tests = compile-only // flaky
}
giabao_asm-flow.tests = disabled // Does not compile
giiita_refuel {
  source-patches = [
    { 
      path = "refuel-json-macro/src/main/scala-3/refuel/json/compiletime/DeriveReads.scala"
      pattern      = "using inline A: Mirror.ProductOf[A]"
      replace-with = "using A: Mirror.ProductOf[A]" 
    },
    { 
      path = "refuel-json-macro/src/main/scala-3/refuel/json/compiletime/DeriveReadsWithIndex.scala"
      pattern      = "using inline A: Mirror.ProductOf[A]"
      replace-with = "using A: Mirror.ProductOf[A]" 
    },
    { 
      path = "refuel-json-macro/src/main/scala-3/refuel/json/compiletime/DeriveWrites.scala"
      pattern      = "using inline A: Mirror.ProductOf[A]"
      replace-with = "using A: Mirror.ProductOf[A]" 
    },
    { 
      path = "refuel-json-macro/src/main/scala-3/refuel/json/compiletime/DeriveWritesWithIndex.scala"
      pattern      = "using inline A: Mirror.ProductOf[A]"
      replace-with = "using A: Mirror.ProductOf[A]" 
    }
  ]
}
gitbucket_blocking-slick {
  source-patches = [{ 
    path = "src/test/scala/com/github/takezoe/slick/blocking/SlickBlockingAPISpec.scala"
    pattern      = "override lazy val db = Tables"
    replace-with = "override val db = Tables" 
  }]
}
ghostdogpr_caliban { 
  source-patches = [{ 
      path = "core/src/main/scala/caliban/GraphQLInterpreter.scala"
      pattern      = "R0 with R1 <:< R"
      replace-with = "(R0 & R1) <:< R" 
    }]
}

h8io_borscht{
  projects.overrides{
    template-apache-commons-text.tests = compile-only // missing resources
  }
}
hedgehogqa_scala-hedgehog{
    // -siteroot in Compile/scalacOptions since 3.0.2+ gives a warnings
  sbt.commands = ["disableFatalWarnings"]
}
haifengl_smile{
  java.version = 21
  sbt.commands = ["""set scala/Test/unmanagedSources/excludeFilter ~= { _ || "PlotSpec.scala" } """]
}
higherkindness_droste {
  sbt.commands = ["disableFatalWarnings"]
  source-patches = [{ 
    path = ".jvmopts"
    pattern      = "-XX:\\+(CMSClassUnloadingEnabled|UseConcMarkSweepGC)"
    replace-with = ""
  }]
}
hnaderi_edomata{
  projects.exclude = ["edomata-docs"] // Requires Scala Native compiler plugin
}
hnaderi_named-codec{
  projects.exclude = ["named-codec-docs"] // Requires Scala Native compiler plugin
}
hnaderi_yaml4s {
  projects.exclude = ["yaml4s-docs"] // Requires Scala Native compiler plugin
}
hsci-r_lucene-perfieldpostingsformatordtermvectorscodec.tests = disabled // does not compile
http4s_http4s{
  sbt.commands = [
    "set every unidoc/unidocAllSources := Nil" // unidoc sometimes leads to deadlock/timeout when run in container
  ]
  source-patches = [
    { 
      path = "laws/src/main/scala/org/http4s/laws/discipline/EntityCodecTests.scala"
      pattern      = "laws.entityCodecRoundTrip _"
      replace-with = "laws.entityCodecRoundTrip" 
    }, { 
      path = "laws/src/main/scala/org/http4s/laws/discipline/EntityEncoderTests.scala"
      pattern      = "laws.accurateContentLengthIfDefined _"
      replace-with = "laws.accurateContentLengthIfDefined" 
    }, {
      path = "tests/shared/src/test/scala/org/http4s/QueryParamCodecLaws.scala"
      pattern      = ".decode _"
      replace-with = ".decode" 
    }
  ]
}

ichoran_kse3.java.version = 21

iheartradio_ficus.source-version = 3.3 #Illegal match type
itv_quartz4s {
  source-patches = [
    { 
      path = "core/src/main/scala-3/com/itv/scheduler/extruder/Derivation.scala"
      pattern      = "inline A: Mirror.Of[A]"
      replace-with = "A: Mirror.Of[A]" 
    }
  ]
}
indoorvivants_subatomic{
  sbt.commands = [
      """set every Test/unmanagedSources/excludeFilter := HiddenFileFilter || "MdocJSTests.scala"""" 
      "disableFatalWarnings"
    ]
}
indoorvivants_weaver-playwright.tests = compile-only // uses scripts
ingarabr_gcs-lock.tests = compile-only // uses gcloud
inkytonik_kiama {
  source-patches = [{ 
    path = ".sbtopts"
    pattern      = "-J-XX:+CMSClassUnloadingEnabled"
    replace-with = ""
  }]
}
irevive_union-derivation.tests = compile-only // fails due to changes in report messages
ist-dsi_scala-keystone-client.tests = compile-only // uses docker
ivoah_slippy {
  source-patches = [{ 
      path = "src/main/scala/Lisp.scala"
      pattern      = ".eval()"
      replace-with = ".eval" 
    }]
}

japgolly_test-state {
  projects.overrides{
  }
}
jbwheatley_pact4s.sbt.commands = ["""set shared/scalacOptions --= Seq("-Wconf:cat=deprecation:i", "-Xfatal-warnings") """]
jchapuis_fs2-kafka-mock {
  source-patches = [
    { 
      path = "src/test/scala/io/github/jchapuis/fs2/kafka/mock/MockKafkaProducerSuite.scala"
      pattern      = "implicit val patience = MockKafkaProducer.Patience"
      replace-with = "implicit val patience: MockKafkaProducer.Patience = MockKafkaProducer.Patience" 
    }
  ]
}
jcouyang_dhall-generic {
  sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
  source-patches = [
    # Won't fix: https://github.com/scala/scala3/issues/20298
    {
      path = "src/test/scala-3/us/oyanglul/dhall/Data.scala"
      pattern      = "import generic.Decoder"
      replace-with = "import generic.{Decoder}\nimport us.oyanglul.dhall.generic.Decoder.given\n" 
    },
    { 
      path = "src/test/scala/us/oyanglul/dhall/GenericSpec.scala"
      pattern      = "import generic._\n"
      replace-with = "import generic._\nimport generic.Decoder.given\n" 
    }
  ]
}
jd557_minart {
  source-patches = [
    { 
      path = "core/shared/src/main/scala/eu/joaocosta/minart/graphics/SurfaceView.scala"
      pattern      = "copy(cx = newCx, cy = newCy, newWidth, newHeight)"
      replace-with = "copy(cx = newCx, cy = newCy, width = newWidth, height = newHeight)" 
    }
  ]
}	
joan38_kubernetes-client {
  source-patches = [
    { 
      path = "build.sc"
      pattern      = "case \"3.[0-9]+.[0-9]+\""
      replace-with = "case \"<SCALA_VERSION>\"" 
    }
  ]
  tests = compile-only  
}
jobial-io_scase{
  projects.exclude=["io.jobial%scase-lambda-scala3-example"] 
}
jodersky_applib{
  source-patches = [{
    path = "clam/src/clam/dispatch/Command.scala"
    pattern      = "exit: Int => Nothing = sys.exit\n"
    replace-with = "exit: Int => Nothing = sys.exit(_)\n"
  }]
}
jodersky_scala-argparse{
  projects.exclude=[
    "io.crashbox%configparse"
    "io.crashbox%configparse-core"
  ] 
}
jodersky_scalapb-ujson{
  tests = disabled // starts failing process (proto gen?)
}
joernio_joern{
  projects.overrides{
    x2cpg.tests = compile-only // Requires mvn binary
    jssrc2cpg.tests = compile-only // Requires joernio/astgen installed via npm
  }
  projects.exclude=[php2cpg] // Malformed setup file
}
json4s_json4s.source-version=3.3
jwojnowski_googlecloud4s.tests = compile-only // uses docker
jvican_dijon.projects.exclude = ["me.vican.jorge%monix-grpc-codegen", "me.vican.jorge%monix-grpc-runtime"] // missing
j5ik2o_akka-persistence-dynamodb.projects.exclude = ["com.github.j5ik2o%event-store-adapter-scala"] // missing

katrix_minejson.tests = disabled // Does not compile, build issue
katrix_perspective {
  source-patches = [{
      # won't fix https://github.com/scala/scala3/issues/21270 
      path = "dotty/derivation/src/test/scala/perspective/derivation/InlineHKDSumGenericTests.scala"
      pattern      = "test(\"InlineHKDSumGeneric.nameToIndex is correct\") {"
      replace-with = "test(\"InlineHKDSumGeneric.nameToIndex is correct\") {\n    import instance.{indexK, mapConst}\n"
    }]
}
katrix_minejson.tests = disabled // Does not compile, build issue
kierendavies_skunk-migrate.tests = compile-only 
kevin-lee_extras{
  source-patches = [{
    path = "build.sbt"
    pattern      = "ThisBuild \\\/ scalafixScalaBinaryVersion := \\{(\\n.*)+newVersion\\n\\}"
    replace-with = ""
  }]
}
kevin-lee_just-semver{
  projects.exclude = ["io.kevinlee%just-semver"] // aggregate project adding dependency on coreJS
}
kevin-lee_openai4s{
  source-patches = [{
    path = "build.sbt"
    pattern      = "ThisBuild \\\/ scalafixScalaBinaryVersion := \\{(\\n.*)+newVersion\\n\\}"
    replace-with = ""
  }]
}
kostaskougios_functions-remote.java.version = 21
# kostaskougios_terminal21-restapi {
# Keep testing it for the purpouse of Scala LTS, let it fail on Scala Next.  
# // Uses functions-remote code generator which expects Scala 3.3 Tasty at most
#   projects.exclude = [
#     io.github.kostaskougios%terminal21-ui-std,
#     io.github.kostaskougios%terminal21-nivo,
#     io.github.kostaskougios%terminal21-spark,
#     io.github.kostaskougios%terminal21-mathjax
#   ]
# }

kubukoz_smithy-playground	{
  sbt.commands = [
    "mapScalacOptions -experimental"
  ]
}

lampepfl_steps{
  source-patches = [{
    path         = "src/main/scala/steps/annotation/toString.scala"
    pattern      = "override def transform(using Quotes)(tree: quotes.reflect.Definition): List[quotes.reflect.Definition]"
    replace-with = "override def transform(using Quotes)(tree: quotes.reflect.Definition, companion: Option[quotes.reflect.Definition]): List[quotes.reflect.Definition]"
  }]
}	
laserdisc-io_fs2-aws{
  sbt.commands = ["disableFatalWarnings"]
}
lichess-org_lila.java.version = 21
lichess-org_playframework-lila.java.version = 21
lichess-org_scalachess { 
  tests = compile-only // Deadlocks in containers
  # import chess.format.pgn.PgnHelper.*
  source-patches = [{ 
      path = "bench/src/main/scala/benchmarks/PgnBench.scala"
      pattern      = "import chess.format.pgn.PgnHelper.*" // does not exist
      replace-with = ""
    }]
}
liewhite_common.source-patches = [
    { 
      path = "build.sbt"
      pattern      = "scalaVersion := scala3Version" // No such field defined
      replace-with = """scalaVersion := "<SCALA_VERSION>" """
    }
  ]
lightbend_ssl-config.tests = compile-only // assumes JDK 8
linyxus_papiers-core.tests = compile-only // flaky
lloydmeta_enumeratum{
  sbt.options=["-Denumeratum.useLocalVersion=true"]
}
lorandszakacs_enclosure.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
scala-graph_scala-graph{
  source-patches = [{ 
      path = "core/src/main/scala/scalax/collection/AnyGraph.scala"
      pattern      = "builder ++= (edges = "
      replace-with = "builder.++=(edges = "
    }]
}	
scala-interop_slinc {
  java.version = 21
  source-version = 3.3
  sbt.commands = ["""mapScalacOptions "-experimental" "" """]
}
scala-steward-org_scala-steward{
  projects.exclude=["scala-steward-docs"] // conflicting cross-version
  sbt.commands = [
    // Scaladoc issues
    "set core.jvm/Compile/doc/skip := true"
    "set core.jvm/Compile/publish/skip := true"
  ]
}
slick_slick {
  source-patches = [
    { 
      path = "slick/src/main/scala/slick/ast/Symbol.scala"
      pattern      = "options.find(ct.runtimeClass.isInstance _)"
      replace-with = "options.find(ct.runtimeClass.isInstance)"
    }]
  projects.overrides {
    slick-testkit.tests = disabled // codegen clashes with rewrites
  }
}
mateuszkubuszok_pipez{
  source-patches = [
    { 
      path = "project/Settings.scala"
      pattern      = "case Some((3, 2))"
      replace-with = "case Some((3, _))"
    }
  ]
}
marcinzh_turbolift {
  source-patches = [{ 
    path = "build.sbt"
    pattern      = """val ScalaNext = .*"""
    replace-with = """val ScalaNext = "<SCALA_VERSION>" """
  }]
}
marchliu_jaskell-dotty.sbt.commands = ["""set Compile/sources ~= (_.filter(_.getName != "NewLine.scala")) """] // Duplicates with Newline.scala
mercurievv_minuscles {
  source-patches = [{ 
    path = "build.sbt"
    pattern      = "val commonSettings "
    replace-with = "ThisBuild / tlBaseVersion := \"0.1\"\nval commonSettings"""
  }]
}
metarank_ltrlib {
  source-patches = [{ 
    path = "src/test/scala/io/github/metarank/ltrlib/ranking/pointwise/LogRegRankerTest.scala"
    pattern      = "RandomRanker().fit()"
    replace-with = "RandomRanker().fit(())"
  }]
}
tmccarthy_fetch{
  # https://github.com/scala/scala3/issues/15843
  sbt.commands = ["set awsTextract/Compile/doc/sources := Nil"]
  source-patches = [{ 
      path = "core/src/main/scala/au/id/tmm/fetch/osm/model/response/Place.scala"
      pattern      = "case class Other private ("
      replace-with = "case class Other private[SubKey] (" 
    }]
}
monix_minitest.sbt.commands    = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
monix_implicitbox.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
monix_monix {
  source-patches = [{ 
    path = ".jvmopts"
    pattern      = "-XX:+CMSClassUnloadingEnabled"
    replace-with = ""
  }]
}
monix_monix-connect	{
  source-patches = [{
    path = "project/plugins.sbt",
    pattern      = """addSbtPlugin("com.thesamet" % "sbt-protoc" % "1.0.3")"""
    replace-with = """addSbtPlugin("com.thesamet" % "sbt-protoc" % "1.0.8")"""
  },{ 
    path = "s3/src/test/scala/monix.connect.s3/S3RequestBuilderSpec.scala"
    pattern      = "contentLenght.getOrElse(null)"
    replace-with = "contentLenght.getOrElse(-1L)"
  },{
    path = "aws-auth/src/main/scala/monix/connect.aws.auth/MonixAwsConf.scala"
    pattern      = "final case class MonixAwsConf private ("
    replace-with = "final case class MonixAwsConf ("
  },{
    path = "dynamodb/src/test/scala/monix/connect/dynamodb/Fixture.scala"
    pattern      = "incWithF.runToFuture"
    replace-with = "incWithF().runToFuture"
  }]
}
mrumkovskis_tresql {
  projects.overrides {
    tresql.tests = disabled
  }
  source-patches = [{ 
      path = "build.sbt"
      pattern      = """sys.error("Java 11 is required for this project"""
      replace-with = """println("Java 11 is required for this project"""
    }]
}
mvv_sager {
  sbt.commands = ["disableFatalWarnings"]
}
mvv_typine.sbt.commands = ["disableFatalWarnings"]

nafg_css-dsl.projects.exclude = [
   // codegen fails
  "io.github.nafg.css-dsl%fomanticui_scalajsreact",
  "io.github.nafg.css-dsl%fomanticui_scalatags",
  "io.github.nafg.css-dsl%bulma_scalatags",
  "io.github.nafg.css-dsl%bulma_scalajsreact"
]
nau_scalus {
  source-patches = [{ 
    path = "scalus-plugin/src/main/scala/scalus/Plugin.scala"
    pattern      = """\s*def init\(options: List\[String\]\): List\[PluginPhase\]"""
    replace-with = "    override def init(options: List[String]): List[PluginPhase]"
  }]
}
natural-transformation_avro4s.java.version = 21
natural-transformation_korolev {
  source-patches = [{
    path = "interop/pekko/src/test/scala/CountdownSpec.scala"
    pattern      = "new Countdown[Future]()("
    replace-with = "new Countdown[Future](using " 
  },{
    path = "interop/akka/src/test/scala/CountdownSpec.scala"
    pattern      = "new Countdown[Future]()("
    replace-with = "new Countdown[Future](using " 
  }]
  tests = compile-only //deadlocks in the CB
}
neandertech_langoustine	{
  projects.overrides {
    langoustine-tracer.tests = disabled
  }
}
noelwelsh_mads.sbt.commands = ["disableFatalWarnings"]
novamage_typed-map{
  source-patches = [{ 
    path = ".scalafix.conf"
    pattern      = "ExplicitResultTypes,"
    replace-with = ""
  }]
}
novamage_rtw{
  source-patches = [{ 
    path = ".scalafix.conf"
    pattern      = "ExplicitResultTypes,"
    replace-with = ""
  }]
}

opaliasystems_opalia-commons-core {
  source-patches = [{ 
    path = "src/main/scala/systems/opalia/commons/core/utility/rendering/Renderer.scala"
    pattern      = "with CharSequence {"
    replace-with = "with CharSequence {\n  override def isEmpty(): Boolean = super.isEmpty()"
  }]
}
otavia-projects_otavia {
  # Experimental, won't fix
  source-patches = [{ 
    path = "build.sc"
    pattern      = """Seq("-Yexplicit-nulls")"""
    replace-with = "Seq.empty[String]"
  }]
}
outr_hasher{
  # Invalid infix syntax
  tests = disabled
  # Missing sbt plugin
  source-patches = [{ 
    path = "build.sbt"
    pattern      = """ThisBuild \/.*sonatype[ \S\w]+"""
    replace-with = ""
  }]
}
outr_rapid.java.version = 21

palanga_parana.tests = compile-only // usses cassandra instance
pityka_lamp {
  tests = compile-only // uses native libraries
}
pityka_saddle {
  source-patches = [{ 
    path = "saddle-core/src/main/scala/org/saddle/index/IndexIntRange.scala"
    pattern      = ".contains _)"
    replace-with = ".contains)" 
  },{
    path = "saddle-core/src/main/scala/org/saddle/scalar/ScalarTag.scala"
    pattern      = "new ScalarTagProduct[T]()(ev)"
    replace-with = "new ScalarTagProduct[T](using ev)" 
  },{
    path = "saddle-core/src/main/scala/org/saddle/scalar/ScalarTagBase.scala"
    pattern      = "new LocatorAllAny[T]()(this)"
    replace-with = "new LocatorAllAny[T](using this)" 
  }]
}
pityka_selfpackage {
  source-patches = [{ 
    path = "build.sbt"
    pattern      = "case \"3.\\d+.\\d+\" =>"
    replace-with = "case v if v.startsWith(\"3\") =>" 
  }]
}

pjfanning_akka-rabbitmq.sbt.commands = ["""set every Test/unmanagedSources/excludeFilter := HiddenFileFilter || "PublishSubscribeSpec.scala""""]
pjfanning_jackson-scala3-reflection-extensions.tests = compile-only // uses
pjfanning_scala3-reflection {
  source-patches = [{ 
    path = "src/main/scala/co.blocke.scala_reflection/ReflectionWorker.scala"
    pattern      = "def init(options: List[String]): List[PluginPhase]"
    replace-with = "override def init(options: List[String]): List[PluginPhase]" 
  }]
}
playframework_playframework{
  source-patches = [{ 
    path = "web/play-openid/src/main/scala/play/api/libs/openid/OpenIdClient.scala"
    pattern      = "findUriWithType(response.xml) _"
    replace-with = "findUriWithType(response.xml)" 
  }]
}
playframework_twirl{
  source-patches = [{ 
    path = "compiler/src/test/scala-3/play/twirl/compiler/test/Helper.scala"
    pattern      = "(\\s*)def printMessage\\(msg: String\\): Unit"
    replace-with = "$1def echoMessage(msg: String): Unit = printMessage(msg)\n$0" 
  }]
}
plokhotnyuk_jsoniter-scala {
  sbt.commands = ["""set every Test/unmanagedSources/excludeFilter := HiddenFileFilter || "JsonCodecMakerNewTypeSpec.scala" """]
}
polynote_uzhttp {
  source-patches = [
    { 
      path = "build.sbt"
      pattern      = """if (scalaVersion.value != "3.*")"""
      replace-with = """if (scalaVersion.value != "<SCALA_VERSION>")"""
    }
  ]
}
potencia_formats{
  source-patches = [{
    path = "build.sc"
    pattern      = "case \"3\"\\s+=>\\s+\"3.\\d+.\\d+\""
    replace-with = "case \"3\" => \"<SCALA_VERSION>\"" 
  }]
}
scalamock_scalamock {
  sbt.commands = ["mapScalacOptions -experimental"]
  source-patches = [{
    path = "core/jvm/src/test/scala/com.paulbutcher.test/mock/JavaMocksTest.scala"
    pattern      = "(m.simplePolymorphicMethod)"
    replace-with = "(m.simplePolymorphicMethod[Int])"
  },{
    # https://github.com/scala/scala3/issues/21506
    path = "core/shared/src/test/scala/org/scalamock/test/scalatest/PathSpecTest.scala"
    pattern      = """val mockFun = mockFunction[String, Unit]("mockFun")"""
    replace-with = """val mockFun = mockFunction[String, Unit](functionName("mockFun"))"""
  }]
}
profunktor_neutron.tests = compile-only // Deadlocks in CI
pureharm_pureharm-db-core{
  projects.exclude = [
    "com.busymachines%pureharm-db-testkit-ce2"
    "com.busymachines%pureharm-db-test-data"
    "com.busymachines%pureharm-db-test-data-ce2"
    "com.busymachines%pureharm-db-testkit"
  ]
}

rayrobdod_string-context-parser-combinator {
  source-patches = [{
    path = "build.sbt"
    pattern      = "\"versions.json\","
    replace-with = "\"versions.json\""
  }]
}
rcardin_yaes.java.version = 21	
reactivemongo_reactivemongo {
  projects.exclude = ["org.reactivemongo%reactivemongo-alias"] // missing
  projects.overrides = {
    reactivemongo {
      // Actual tests needs env set up
    }
  }
}
reactivemongo_reactivemongo-bson {
  projects.exclude = ["reactivemongo-jmx", "reactivemongo-datadog", "reactivemongo-kamon"]
  projects.overrides = {
  }
}
reactivemongo_reactivemongo-play-json.tests = compile-only // fails due to changes in reported error messages
rmgk_scitzen {
  source-patches = [{
    path = "project.scala"
    pattern      = """//> using option -java-output-version 23"""
    replace-with = """
//> using option -java-output-version 23
//> using jvm 23"""
  }]
}
ruimo_csvparser.tests = disabled // does not compile
ruimo_graphics.tests = disabled // does not compile
ruimo_scoins.tests = disabled // does not compile

sake92_sharaf {
  source-patches = [{ 
    # Fix for 1.0.0-RC3
    path = "build.mill"
    pattern      = "mill.vcs.VcsVersion"
    replace-with = "mill.util.VcsVersion" 
  }]
}
sageserpent-open_americium{
  java.version = 21
}
sageserpent-open_kineticmerge{
  source-version=3.5 // override -source:future	
  source-patches = [{ 
    # Non-tail recursive nested functions
    path = "src/main/scala/com/sageserpent/kineticmerge/core/CodeMotionAnalysis.scala"
    pattern      = "@tailrec"
    replace-with = "" 
  }]
}
sagifogel_proptics{
  # All of this source:3.4 patches are workaround for https://github.com/scala/scala3/issues/21394
  source-patches = [{ 
    path = "core/shared/src/main/scala/proptics/Grate.scala"
    pattern      = "Grate_[F[A], F[B], A, B](cotraverse(_: (F[A] => A) => B)(identity[F[A]])(Functor[F[A] => *]))"
    replace-with = "Grate_[F[A], F[B], A, B](cotraverse(_: (F[A] => A) => B)(identity[F[A]])(using Functor[F[A] => *]))" 
  },{
    path = "core/shared/src/main/scala/proptics/data/Dual.scala"
    pattern      = "def combine(x: Dual[A], y: Dual[A]): Dual[A] = semigroupDual(ev)"
    replace-with = "def combine(x: Dual[A], y: Dual[A]): Dual[A] = semigroupDual(using ev)" 
  },{
    path = "law/src/main/scala/proptics/law/discipline/WanderTests.scala"
    pattern      = "ChoiceTests(wander).choice[A, B, C, D, E, G].props ++ StrongTests(wander).strong"
    replace-with = "ChoiceTests(using wander).choice[A, B, C, D, E, G].props ++ StrongTests(using wander).strong" 
  },{
    path = "test/shared/src/test/scala/proptics/specs/ZippingSpec.scala"
    pattern      = "ProfunctorTests[Zipping](profunctorZipping)"
    replace-with = "ProfunctorTests[Zipping](using profunctorZipping)" 
  },{
    path = "test/shared/src/test/scala/proptics/specs/TaggedSpec.scala"
    pattern      = "ProfunctorTests[Tagged](Tagged.profunctorTagged)"
    replace-with = "ProfunctorTests[Tagged](using Tagged.profunctorTagged)"
  },{
    path = "test/shared/src/test/scala/proptics/specs/StallSpec.scala"
    pattern      = "ProfunctorTests[Stall[Int, Int, *, *]](profunctorStall)"
    replace-with = "ProfunctorTests[Stall[Int, Int, *, *]](using profunctorStall)" 
  },{
    path = "test/shared/src/test/scala/proptics/specs/ForgetSpec.scala"
    pattern      = "Tests[Forget[Int, *, *]](Forget."
    replace-with = "Tests[Forget[Int, *, *]](using Forget." 
  },{
    path = "test/shared/src/test/scala/proptics/specs/GrateSpec.scala"
    pattern      = "zipWithF[Id](identity)(_.part)(Applicative[Id])"
    replace-with = "zipWithF[Id](identity)(_.part)(using Applicative[Id])" 
  }]
}
sangria-graphql_sangria{
  source-patches = [{ 
    path = "modules/core/src/main/scala/sangria/introspection/package.scala"
    pattern      = "case n: Type with Named =>"
    replace-with = "case n: (Type & Named) =>"
  }]
}
sbt_librarymanagement {
  sbt.commands = ["set every scalafmtOnCompile := false"]
}
scala_toolkit.tests = disabled // no tests
scalacenter_scala-debug-adapter{
  source-patches = [{ 
    path = "modules/tests/src/main/scala/ch/epfl/scala/debugadapter/testfmk/DebugStepAssert.scala"
    pattern      = "val assertion = if (ignore) assertIgnore(result.toString) _ else assertSuccess(result)(_)"
    replace-with = "val assertion = if (ignore) assertIgnore(result.toString) else assertSuccess(result)" 
  }]
}
scala-native_scala-native.tests = compile-only  
scalacenter_simple-rockets-compiler {
  # multi string settings need to use `:` since 3.2
  sbt.commands = ["""set core/Compile/doc/scalacOptions ~= {_.diff(Seq("-comment-syntax", "wiki")) ++ Seq("-comment-syntax:wiki")}"""]
}
scalacenter_tasty-query.tests = disabled // does not compile
scalalandio_chimney-macro-commons {
  source-patches = [{ 
    path = "chimney-macro-commons/src/main/scala-3/io/scalaland/chimney/internal/compiletime/ExprsPlatform.scala"
    pattern      = ".map(${ resetOwner(fExpr) })(${ summonImplicitUnsafe[ClassTag[B]] }) }"
    replace-with = ".map(${ resetOwner(fExpr) })(using ${ summonImplicitUnsafe[ClassTag[B]] }) }" 
  }]
}	
scalamolecule_molecule.tests = disabled // does not compile, try restore in the future
scalanlp_breeze {
  source-patches = [{ 
    path = "math/src/main/scala/breeze/math/VectorSpace.scala"
    pattern      = "V <:< NumericOps[V] with QuasiTensor[I, S]"
    replace-with = "V <:< (NumericOps[V] & QuasiTensor[I, S])" 
  },{ 
    path = "math/src/main/scala/breeze/math/VectorSpace.scala"
    pattern      = "V <:< NumericOps[V] with QuasiTensor[Int, S]"
    replace-with = "V <:< (NumericOps[V] & QuasiTensor[Int, S])" 
  },{ 
    path = "math/src/main/scala/breeze/math/VectorSpace.scala"
    pattern      = "M <:< NumericOps[M] with QuasiTensor[(Int, Int), S]"
    replace-with = "M <:< (NumericOps[M] & QuasiTensor[(Int, Int), S])" 
  }]
}
scala-steward-org_scala-steward {
  source-patches = [{ 
    path = "modules/core/src/test/scala/org/scalasteward/core/mock/package.scala"
    pattern      = "runA(MockState.empty).unsafeRunSync()(cats.effect.unsafe.implicits.global)"
    replace-with = "runA(MockState.empty).unsafeRunSync()(using cats.effect.unsafe.implicits.global)" 
  }]
}
scalatest_scalatest {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat",
    // From managged community build https://github.com/scala/scala3/blob/fb7f900667ea57e78a098e4831be36e0a7da6cba/community-build/src/scala/dotty/communitybuild/projects.scala#L293
    """set scalatestTestDotty/Test/managedSources ~= (_.filterNot(v => Seq("GeneratorSpec.scala", "FrameworkSuite.scala", "WaitersSpec.scala", "TestSortingReporterSpec.scala", "JavaFuturesSpec.scala", "ParallelTestExecutionSpec.scala", "TimeLimitsSpec.scala", "DispatchReporterSpec.scala", "TestThreadsStartingCounterSpec.scala", "SuiteSortingReporterSpec.scala", "CommonGeneratorsSpec.scala", "PropCheckerAssertingSpec.scala", "ConductorMethodsSuite.scala", "EventuallySpec.scala").contains(v.getName) ))""",
    """set scalacticTestDotty/Test/managedSources ~= (_.filterNot(_.getName == "NonEmptyArraySpec.scala"))""",
    """set genRegularTests4/Test/managedSources ~= (_.filterNot(v => Seq("FrameworkSuite.scala", "GeneratorSpec.scala", "CommonGeneratorsSpec.scala", "ParallelTestExecutionSpec.scala", "DispatchReporterSpec.scala", "TestThreadsStartingCounterSpec.scala", "EventuallySpec.scala").contains(v.getName) ))"""
  ]
  # Missing mappings, maybe generated by sbt
  projects.exclude=["org.scalatest%scalatest-app"]
}
scalatest_scalatestplus-easymock   { sbt.commands = ["set Compile/doc/skip := true"] }
scalatest_scalatestplus-jmock      { sbt.commands = ["set Compile/doc/skip := true"] }
scalatest_scalatestplus-junit      { sbt.commands = ["set Compile/doc/skip := true"] }
scalatest_scalatestplus-mockito    { sbt.commands = ["set Compile/doc/skip := true"] }
scalatest_scalatestplus-scalacheck { sbt.commands = ["set Compile/doc/skip := true"] }
scalatest_scalatestplus-selenium   { sbt.commands = ["set Compile/doc/skip := true"] }
scalatest_scalatestplus-scalacheck { sbt.commands = ["set scalatestPlusScalaCheckJVM/Compile/doc/skip := true"] }
scala-ts_scala-ts {
  source-patches = [{ 
      path = "core/src/main/scala-3/plugins/CompilerPlugin.scala"
      pattern      = "def init(options: List[String]): List[PluginPhase]"
      replace-with = "override def init(options: List[String]): List[PluginPhase]" 
    },{ 
      path = ".jvmopts"
      pattern      = "-XX:+CMSClassUnloadingEnabled"
      replace-with = ""
  }]
}
scalapy_scalapy.tests = compile-only
scalapb_scalapb {
  tests = compile-only // disabled due to usage of scalaOutputVersion, breaks due to changes in LazyVals
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
  source-patches = [{
    path = "build.sbt"
    pattern      = "setScalaOutputVersion"
    replace-with = ""
  }]
}
scalaz_scalaz {
  sbt {
    commands = ["set every unidoc/unidocAllSources := Nil"] // in Scala 3.1.0+ gets into infinite loop when run in containers
  }
}
scf37_hottie.tests = compile-only // Uses dotc.Main, works locally, fails in container
sciss_soundprocesses{
  projects.exclude=["de.sciss%soundprocesses-compiler"] // Fails to compile after changes to compiler API in 3.1.3
}
scodec_scodec-cats.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
scodec_scodec-protocols{
  sbt.commands = ["mapScalacOptions -no-indent"]
}
scorexfoundation_scorex-util {
  source-patches = [{
    path = "shared/src/test/scala/scorex/util/serialization/VLQReaderWriterSpecification.scala",
    pattern      = "(x: \\w+) =>"
    replace-with = "($1) =>"
  }]
}
scottweaver_testcontainers-for-zio {
  sbt.commands = ["set every semanticdbEnabled := false"]
}
scoverage_scalac-scoverage-plugin{
  projects.overrides {
    # Fails in runtime times due to changed error messages
  }
}
sirthias_borer{
  # https://github.com/scala/scala3/issues/21382
  sbt.commands = [
    """mapScalacOptions "" "-indent" """
  ]
}
sky-uk_kafka-topic-loader.tests = compile-only // timeouts
softwaremill_ox {
  java.version=21
}
softwaremill_sttp {
  sbt {
    commands=["set every closeClassLoaders := false"]
  }
  projects.exclude=[
    # Does not compile - we publish ZIO 1.x
    "com.softwaremill.sttp.client3%zio.*"
  ]
}
softwaremill_tapir {
  java.version=21
  sbt.options=["-J-XX:+UseG1GC"]
  sbt.commands=["set vertxServerZio.jvm(true)/Compile/doc/sources := Nil"]
  projects{
    exclude = ["com.softwaremill.sttp.tapir%tapir-iron"]
    overrides {
      tapir-sttp-client-ws-zio.tests = compile-only  
    }
  }
  source-patches = [{
    path = "core/src/main/scala/sttp/tapir/TapirAuth.scala"
    pattern      = "header[T](HeaderNames.Authorization)(authCodec)"
    replace-with = "header[T](HeaderNames.Authorization)(using authCodec)"
  }]
}
softwaremill_tapir-loom {
  java.version=21
}
soundcloud_twinagle{
    source-patches = [{
    path = "build.sbt"
    pattern      = "case Some((3, 3)) =>"
    replace-with = "case Some((3, _)) =>"
  }]
}
staeff777_scalaveusz.tests = disabled // Does not compile with any Scala version 
swagger-akka-http_swagger-pekko-http.tests = compile-only // depends on experimental compiler

reactivemongo_reactivemongo {
  projects.exclude=[
    "reactivemongo%reactivemongo-alias" # Not a part of the main repo, defined in reactivemongo-shaded
  ]
}
dotty-cps-async_cps-async-connect {
  java.version = 21
}
dotty-cps-async_dotty-cps-async{
  java.version = 21
  sbt.commands = [
    """mapScalacOptions "" "-Ydebug,-Ydebug-trace,-Ydebug-names,-Xprint-types,-Yprint-syms,-uniqid" """
  ]
}

t2v_holidays.tests = compile-only // invalid classpath at runtime
taig_scala-linguist.projects.exclude=["io.taig%scala-linguist-graalvm-ruby"] // needs GraalVM
taig_scala-pygments.projects.exclude=["io.taig%scala-pygments-graalvm-python"]
talenteca_olon-web-framework.tests = disabled # does not compile
tersesystems_echopraxia-plusscala {
  sbt.commands = [
    # Should be Scala 2.12 only test
    """set api/Test/unmanagedSources/excludeFilter ~= { _ || "ValueAttributeSpec.scala" }"""
  ]
}
testcontainers_testcontainers-scala{
  source-patches = [{
    path = "modules/vault/src/test/scala/com/dimafeng/testcontainers/integration/VaultSpec.scala"
    pattern      = "given"
    replace-with = "`given`" 
  }]
}
tethys-json_tethys {
  sbt.commands = ["mapScalacOptions -experimental"]
}	
thoughtworksinc_binding.scala {
  // Not a part of the repositroy
  projects.exclude=[
    "com.thoughtworks.binding%bindable-bindableseq"
    "com.thoughtworks.binding%covariantstreamt",
    "com.thoughtworks.binding%defaultfuture"
    "com.thoughtworks.binding%keywords-bind"
    "com.thoughtworks.binding%patchstreamt"
    "com.thoughtworks.binding%streamt"
  ]
}
timbertson_flogger {
  # Missing sbt plugin
  source-patches = [{ 
    path = "project/src/main/scala/PublishSettings.scala"
    pattern      = "ThisBuild / sonatypeCredentialHost := sonatypeCentralHost"
    replace-with = ""
  }]
}
tminglei_slick-pg {
  source-patches = [{ 
    path = "build.sbt"
    pattern      = "libraryDependencies :="
    replace-with = "libraryDependencies ++="
  }]
}
tofu-tf_tofu{
  # Misconfigured
  projects.exclude = [tofu-memo, tofu, tofu-derivation, tofu-env, tofu-concurrent-ce2]
  sbt.commands = [
    # Does not compile
    """set every Test/unmanagedSources/excludeFilter := { HiddenFileFilter || "CalcSuite.scala" }"""
  ]
  source-patches = [{
    # Invalid cross-compile config, module has no sources for Scala 3 
    path = "build.sbt"
    pattern      = "libraryDependencies += shapeless"
    replace-with = ""
  },{ 
    path = "modules/kernel/src/main/scala/tofu/syntax/context.scala"
    pattern      = "F WithLocal C"
    replace-with = "F `WithLocal` C"
  },{
    path = "modules/kernel/src/main/scala/tofu/data/Embedded.scala"
    pattern      = "new ParApplicative[G.F, E]()(G.applicative, E)" 
    replace-with = "new ParApplicative[G.F, E](using G.applicative, E)" 
  }]
}

torrentdam_bencode.tests = disabled // needs ScalaNative nscplugin
tomasmikula_libretto {
  projects.exclude = ["dev.continuously%libretto"] // renamed to core
}

tpolecat_doobie {
  projects.overrides{
    // as per https://github.com/scala/community-builds/pull/835#issuecomment-455729365,
    // these subprojects require a Postgres instance for the tests to run
  }
}
trace4cats_trace4cats {
  projects.exclude = [
    // Not part of the build, incorect metadata in other builds
    "io.janstenpickle%trace4cats-dynamic-sampling-http-server"
    "io.janstenpickle%trace4cats-dynamic-sampling-http4s"
  ]
}
travisbrown_dhallj {
  sbt.commands=["javacc"]
  source-patches = [{
    # Unsupported javacOptions -target|-source:1.7
    path = "build.sbt"
    pattern      = "\"1.7\""
    replace-with = "\"1.8\""
  },{
    # Required after changing private[this] val sortFields
    path = "modules/cats/src/main/scala/org/dhallj/cats/LiftVisitor.scala"
    pattern      = " sortFields"
    replace-with = " _sortFields"
  }]
}
tschuchortdev_hkd4s{
  sbt.commands = ["""mapScalacOptions "" -language:namedTypeArguments,-language:saferExceptions,-language:numericLiterals"""]
  source-patches = [{
    path = "src/main/scala/internal/InspectTree.scala"
    pattern      = "override def transform(using q: Quotes)(tree: q.reflect.Definition): List[q.reflect.Definition]"
    replace-with = "override def transform(using q: Quotes)(tree: q.reflect.Definition, companion: Option[q.reflect.Definition]): List[q.reflect.Definition]"
  }]
}	
twitter_util {
  projects.overrides {
    util-security.tests = compile-only // Fails in the container
  }
}
typelevel_cats.tests = compile-only // flaky test
typelevel_cats-effect {
  source-patches = [{
    // https://github.com/scala/scala3/issues/15920
    path = "core/shared/src/main/scala/cats/effect/IO.scala"
    pattern      = "Right(t.asLeft\\[IO\\[B\\]\\], limit - 1)"
    replace-with = "(t.asLeft, limit - 1).asRight"
  }, {
    // Migration rewrites fixes
    path = "kernel/shared/src/main/scala/cats/effect/kernel/Outcome.scala"
    pattern      = "new OutcomeApplicativeError[F, E]()(F) with MonadError[Outcome[F, E, *], E] {"
    replace-with = "new OutcomeApplicativeError[F, E](using F) with MonadError[Outcome[F, E, *], E] {"
  }]
}
typelevel_cats-mtl {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
}
typelevel_coop {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
}
typelevel_discipline-scalatest {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
}
typelevel_jawn {
  projects.exclude=[
    "com.eed3si9n%shaded-jawn-parser"
  ]
}
typelevel_laika {
  projects.exclude = ["org.typelevel%laika-docs"]
  source-patches = [{
      path = "core/shared/src/main/scala/laika/ast/Cursor.scala"
      pattern      = " RewritableContainer with Block "
      replace-with = " (RewritableContainer & Block) "
    },{
      path = "core/shared/src/main/scala/laika/internal/rewrite/TemplateFormatter.scala"
      pattern      = " SpanContainer with Block "
      replace-with = " (SpanContainer & Block) "
    },{
      path = "core/shared/src/main/scala/laika/internal/rewrite/TemplateFormatter.scala"
      pattern      = " SpanContainer with Span "
      replace-with = " (SpanContainer & Span) "
    },{
      path = "core/shared/src/test/scala/laika/internal/rst/std/StandardBlockDirectivesSpec.scala"
      pattern      = " Hidden with Block "
      replace-with = " (Hidden & Block) "
    }
  ]
}
typelevel_otel4s.tests = compile-only
typelevel_otel4s-experimental.source-patches = [
  {
    path = "modules/trace/src/main/scala-3/org/typelevel/otel4s/experimental/trace/span.scala"
    pattern      = "  )(tree: quotes.reflect.Definition): List[quotes.reflect.Definition] = {"
    replace-with = "  )(tree: quotes.reflect.Definition, _companion: Option[quotes.reflect.Definition]): List[quotes.reflect.Definition] = {"
  } 
]
typelevel_spire {
  source-patches = [
    {
      path = "core/src/main/scala/spire/optional/vectorOrder.scala"
      pattern      = "new ArrayVectorEq[A]()(ev"
      replace-with = "new ArrayVectorEq[A](using ev"
    }, {
      path = "core/src/main/scala/spire/optional/vectorOrder.scala"
      pattern      = "new ArrayVectorOrder[A]()(ev"
      replace-with = "new ArrayVectorOrder[A](using ev"
    } 
  ]
}


ua-parser_uap-scala.tests = compile-only 
unibas-gravis_scalismo.tests = compile-only // Uses native library
unfiltered_unfiltered.tests = disabled // https://github.com/unfiltered/unfiltered/blob/9432d75e3a0f080fc926236ebc4e83518c884351/build.sbt#L8-L17

wiringbits_wiringbits-webapp-utils {
  source-patches = [{ 
    path = ".sbtopts"
    pattern      = "-J-XX:+CMSClassUnloadingEnabled"
    replace-with = ""
  }]
}
wiwiwa_ezscala.java.version = 21
wvlet_airframe {
  projects{
    exclude=[
      "org.wvlet.airframe%airspec" # Inner sbt project, no mechanism to handle that currently
    ]
    overrides{
      //https://github.com/wvlet/airframe/issues/1077
    }
  }
}

vagmcs_scalatikz{
  # Plugin does not work on JDK 11+, unmaintained
  source-patches = [{ 
    path = "project/plugins.sbt"
    pattern      = """addSbtPlugin("ohnosequences" % "sbt-github-release" %"""
    replace-with = """// addSbtPlugin("ohnosequences" % "sbt-github-release" %"""
  },{
    path = "project/ScalaTIKZBuild.scala"
    pattern      = "import ohnosequences.sbt.GithubRelease.keys._"
    replace-with = ""
  },{
    path = "project/ScalaTIKZBuild.scala"
    pattern      = "ghrelease.* := .*,\n"
    replace-with = ""
  }]
}
vagmcs_optimus{
  projects.exclude=[".*solver-mosek", ".*solver-gurobi"] // Missing downloadable jar
  tests = compile-only // Fails locally
}
vigoo_prox.tests = compile-only 
virtuslab_scala-cli {
  projects.overrides{
    directives.tests = compile-only // uses Scala 3.0.2 runner
  }
}
vladkopanev_cats-saga.source-patches = [
  {
    path = "core/src/test/scala/com/vladkopanev/cats/saga/SagaLawsSpec.scala"
    pattern      = "implicit val ticker = Ticker()"
    replace-with = "implicit val ticker: Ticker = Ticker()"
  },
  {
    path = "core/src/test/scala/com/vladkopanev/cats/saga/CatsSagaSpec.scala"
    pattern      = "bookCar compensateIfFail"
    replace-with = "bookCar.compensateIfFail"
  }
]

xebia-functional_munit-compiler-toolkit {
  java.version = 17
}
xuwei-k_unused-proto{
  sbt.commands = ["set every scalafixOnCompile := false", "mapScalacOptions -experimental"]
}

yakivy_poppet.source-patches = [{ 
    path = "build.sc"
    pattern      = "override def scalacOptions = "
    replace-with = "override def scalacOptions = Seq(\"-experimental\") ++ "
  }
]


zaneli_scalikejdbc-athena{
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
}
zengularity_benji {
  source-patches = [{ 
    path = ".jvmopts"
    pattern      = "-XX:+CMSClassUnloadingEnabled"
    replace-with = ""
  }]
}
zio_zio {
  source-patches = [
  { 
    path = "core/shared/src/main/scala/zio/ZIO.scala"
    pattern      = "R0 with R1 <:< R"
    replace-with = "(R0 & R1) <:< R"
  }, {    
    path = "core/shared/src/main/scala/zio/ZIO.scala"
    pattern      = "[R1 <: R with M]"
    replace-with = "[R1 <: (R & M)]"
  }, {
    path = "core/shared/src/main/scala/zio/ZIO.scala"
    pattern      = "R1 <: R with Map[Key, Service]"
    replace-with = "R1 <: (R & Map[Key, Service])"
  }, {
    path = "streams/shared/src/main/scala/zio/stream/ZChannel.scala"
    pattern      = "Env0 with Env1 <:< Env"
    replace-with = "(Env0 & Env1) <:< Env"
  }, {
    path = "streams/shared/src/main/scala/zio/stream/ZStream.scala"
    pattern      = "R0 with R1 <:< R"
    replace-with = "(R0 & R1) <:< R"
  },{
    path = "managed/shared/src/main/scala/zio/managed/ZManaged.scala"
    pattern      = "R0 with R1 <:< R"
    replace-with = "(R0 & R1) <:< R"
  },{
    path = "streams/shared/src/main/scala/zio/stream/ZSink.scala"
    pattern      = "R0 with R1 <:< R"
    replace-with = "(R0 & R1) <:< R"
  },{
    path = "test/shared/src/main/scala/zio/test/Spec.scala"
    pattern      = "TestEnvironment with R1 <:< R"
    replace-with = "(TestEnvironment & R1) <:< R"
  },{
    path = "test/shared/src/main/scala/zio/test/Spec.scala"
    pattern      = "R0 with R1 <:< R"
    replace-with = "(R0 & R1) <:< R"
  },{
    path = "test-sbt/jvm/src/test/scala/zio/test/sbt/TestingSupport.scala"
    pattern      = ") _\n"
    replace-with = ")\n"
  }]
  
}
zio_interop-cats.source-patches = [
  { 
    path = "project/BuildHelper.scala"
    pattern      = "case Some((3, 3))"
    replace-with = "case Some((3, _))"
  }
]
zio_zio-config {
  projects.overrides = {
    // Problem with ZIO deps
    zio-config-magnolia.tests = disabled
    // No Refined macros for Scala 3 
    zio-config-refined.tests = disabled
  }
}
zio_zio-http{
  projects.exclude = ["dev.zio%zio-http-testkit-shaded", "dev.zio%zio-http-shaded"] // missing
  source-patches = [{
    path = "zio-http/shared/src/main/scala/zio/http/endpoint/openapi/OpenAPIGen.scala"
    pattern      = "contentAsJsonSchema(codec, referenceType = referenceType) _"
    replace-with = "contentAsJsonSchema(codec, referenceType = referenceType)"
  },{ 
    path = "zio-http/shared/src/main/scala/zio/http/endpoint/openapi/OpenAPIGen.scala"
    pattern      = "R0 with R1 <:< R"
    replace-with = "(R0 & R1) <:< R"
  },{ 
    path = "zio-http/shared/src/main/scala/zio/http/WebSocketApp.scala"
    pattern      = "R0 with R1 <:< R"
    replace-with = "(R0 & R1) <:< R"
  },{ 
    path = "zio-http/shared/src/main/scala-3/zio/http/HandlerVersionSpecific.scala"
    pattern      = "Env0 with Ctx <:< Env"
    replace-with = "(Env0 & Ctx) <:< Env"
  },{ 
    path = "zio-http/shared/src/main/scala-3/zio/http/RoutesCompanionVersionSpecific.scala"
    pattern      = "Env0 with Ctx <:< Env"
    replace-with = "(Env0 & Ctx) <:< Env"
  }, {
    path = "zio-http/shared/src/main/scala/zio/http/Handler.scala"
    pattern      = "R0 with R1 <:< R"
    replace-with = "(R0 & R1) <:< R"
  },{
    path = "zio-http/jvm/src/test/scala/zio/http/endpoint/NotFoundSpec.scala"
    pattern      = ") _\n"
    replace-with = ")\n"
  },{
    path = "zio-http/jvm/src/test/scala/zio/http/endpoint/QueryParameterSpec.scala"
    pattern      = ") _\n"
    replace-with = ")\n"
  },{
    path = "zio-http/jvm/src/test/scala/zio/http/endpoint/RequestSpec.scala"
    pattern      = ") _\n"
    replace-with = ")\n"
  },{
    path = "zio-http/jvm/src/test/scala/zio/http/endpoint/HeaderSpec.scala"
    pattern      = ") _\n"
    replace-with = ")\n"
  },{
    path = "zio-http/shared/src/main/scala/zio/http/endpoint/openapi/OpenAPIGen.scala"
    pattern      = "contentAsJsonSchema(codec, referenceType = referenceType, omitDescription = omitContentDescription) _,"
    replace-with = "contentAsJsonSchema(codec, referenceType = referenceType, omitDescription = omitContentDescription),"
  }]
}
zio_zio-json {
  projects.overrides {
    zio-json-interop-refined.tests = disabled
  }
}
zio_zio-logging {
  sbt.commands = [disableFatalWarnings]
}
zio_zio-prelude{
    source-patches = [{
    path = "core/shared/src/main/scala/zio/prelude/Equal.scala"
    pattern = """implicit val hashOT: Hash[Option[Throwable]] = Hash.OptionHash {
      // use an indirect instance, so that calling ThrowableHash infinitely doesn't cause stack overflow
      new Hash[Throwable] {
        def hash(a: Throwable): Int                                   = ThrowableHash.hash(a)
        protected def checkEqual(l: Throwable, r: Throwable): Boolean = ThrowableHash.equal(l, r)
      }
    }"""
    replace-with = """implicit val hashOT: Hash[Option[Throwable]] = Hash.OptionHash(using {
      // use an indirect instance, so that calling ThrowableHash infinitely doesn't cause stack overflow
      new Hash[Throwable] {
        def hash(a: Throwable): Int                                   = ThrowableHash.hash(a)
        protected def checkEqual(l: Throwable, r: Throwable): Boolean = ThrowableHash.equal(l, r)
      }
    })"""
  }]
}
zio_zio-profiling {
  source-patches = [{
    path = "zio-profiling-tagging-plugin/src/main/scala-3/zio/profiling/plugins/TaggingPlugin.scala"
    pattern      = "def init(options: List[String]): List[PluginPhase]"
    replace-with = "override def init(options: List[String]): List[PluginPhase]" 
  }]
}
zio_zio-protoquill {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
  source-patches = [{ 
    path = "quill-sql/src/main/scala/io/getquill/generic/ElaborateStructure.scala"
    pattern      = "case Some((3, 3))"
    replace-with = "case Some((3, _))"
  }]
}
zio_zio-quill {
  sbt.options=["-Dquill.scala.version=<SCALA_VERSION>"]
}
