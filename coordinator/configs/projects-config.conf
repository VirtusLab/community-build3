# Content of this file is expected to be moved into actual projects in the future
7mind_izumi {
  source-patches = [
   { 
    path = "project/Deps.sc"
    pattern      = "val scala300 = ScalaVersion\\((.*)\\)"
    replace-with = "val scala300 = ScalaVersion(\"<SCALA_VERSION>\")"
   }
  ]
  projects.exclude = [
    "io.7mind.izumi%idealingua-v1-runtime-rpc-csharp",
    "io.7mind.izumi%idealingua-v1-runtime-rpc-typescript",
    "io.7mind.izumi%idealingua-v1-test-defs",
    "io.7mind.izumi%idealingua-v1-runtime-rpc-http4s",
    "io.7mind.izumi%idealingua-v1-runtime-rpc-scala",
    "io.7mind.izumi%idealingua-v1-runtime-rpc-go",
    "io.7mind.izumi%idealingua-v1-model"
  ]
}

aaronp_code-template.tests=compile-only # uses sript engine factory to work with repl, breaks in RC releases 
absaoss_absa-shaded-jackson-module-scala.tests = disabled # Does not compile in any version
ablearthy_tdjson-bind.tests = disabled # cannot build native library
ajozwik_protoquill-generic {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}

akka_akka {
  // Based on Scala3 managed community build
  sbt.commands = ["disableFatalWarnings"]
}
akka_akka-httptests = compile-only
alejandrohdezma_http4s-munit {
  sbt.commands = [
    // Does not compile with any version of Scala 3
    """set `http4s-munit`/Test/unmanagedSources/excludeFilter ~= {_ || "Http4sTestHttpRoutesSuiteSuite.scala" || "Http4sTestAuthedRoutesSuiteSuite.scala" }"""
  ]
}
almond-sh_almond{
  projects.exclude = ["sh.almond%launcher"] # next RC only, can't resolve
}
apache_pekko {
  java.version = 8
}
apache_pekko-grpc{
  java.version = 8
  projects.exclude = [
    // Build issue https://github.com/apache/incubator-pekko-grpc/commit/53f91e8efb0416831483c34ad9ee9c2cccc11d8d#r131335358
    "org.apache.pekko%pekko-grpc-codegen"
  ]
}
apache_pekko-http {
  java.version = 8
  projects.exclude = [
    # Scalafix supports only Scala2
    "pekko-http-scalafix-rules","pekko-http-scalafix-tests",
    "http-scalafix-test-input", "http-scalafix-test-output",
    # Build issue requires Scalafix
    "pekko-http-tests",  "pekko-http-docs"
  ]
}
apache_pekko-connectors{
  java.version = 8 // for scaladoc
}
appliedtopology_tda4j.source-version = 3.4 // implicits order
armanbilge_litter.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
armanbilge_feral.projects.exclude = [
  // Not present in the repo
  "com.armanbilge%feral-lambda-events",
  "com.armanbilge%feral-lambda-natchez",
  "com.armanbilge%feral-lambda-api-gateway-proxy-http4s",
  "com.armanbilge%feral-core"
]
armanbilge_gcp4s {
  // Needs reordeding of given instances (since 3.4), fails to compile under -source:3.4
  sbt.commands = ["""set every excludeFilter ~= { _ || "EndToEndSuite.scala" }"""]
}
armanbilge_van-cats.source-version=3.4 // override -source:future
assist-iot-sripas_scala-mqtt-wrapper {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
ashwinbhaskar_sight-scala.sbt.commands = [
   """set root/Test/unmanagedSources/excludeFilter ~= { _ || "IntegrationTest.scala" }"""
]
atedeg_mdm {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
atnos-org_eff {
  sbt.commands = [
    """set monixJVM/Test/unmanagedSources ~= (_.filterNot(_.getName == "TaskEffectSpec.scala"))"""
  ]
}
augustjune_canoe {
  sbt.commands = [
    """set core.jvm/Test/unmanagedSources/excludeFilter ~= { _ || "BroadcastSpec.scala" || "BotSpec.scala" }"""
  ]
}
avast_datadog4s.java.version=11

babylonhealth_lit-fhir.tests = disabled // does not compile
benhutchison_scalaswingcontrib.tests = disabled // Does not compile with any Scala version
beangle_db.java.version=17
beangle_ids.java.version=17
beangle_notify.java.version=17
beangle_doc {
  java.version=17
  sbt.commands = ["styleFormat"] // Was failing due to missing license header in v0.1.7
}
bilal-fazlani_circe-json-schema.tests = compile-only // Missing test files at runtime
bitlap_rolls {
  source-patches = [{ 
      path = "rolls-compiler-plugin/src/main/scala/bitlap/rolls/compiler/plugin/RollsCompilerPlugin.scala"
      pattern      = "def init(options: List[String]): List[PluginPhase]"
      replace-with = "override def init(options: List[String]): List[PluginPhase]" 
    }]
}

bitmarck-service_fs2-secon.projects.exclude=["de.bitmarck.bms%http4s-secon"] // not found
bot4s_zmatrix {
  sbt.commands = [
    "excludeLibraryDependency com.github.ghik:zerowaste_{scalaVersion}"
  ]
}
cake-lier_tuples-space-core{
  source-version = 3.4 // implicits
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
cake-lier_tuples-space-client{
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}

carlos-verdes_zio-arangodb.source-version=3.4-migration
carueda_tscfg.sbt.commands = ["genCode"]
cequence-io_openai-scala-client{
  source-patches = [
    { 
      path = "openai-client/build.sbt"
      pattern      = "playWsVersion.value"
      replace-with = "\"2.2.0\"" // was 2.2.0-M2 
    },
    { 
      path = "build.sbt"
      pattern      = "akka-actor-testkit-typed_2.13"
      replace-with = "akka-actor-testkit-typed_3" 
    }
  ]
  tests = compile-only  
}
cheleb_zio-pravega {
  tests = compile-only // uses Docker
  sbt.commands = [
    """set pravega/Test/unmanagedSources/excludeFilter ~= {_ || "CreateResourcesExample.scala" }""", // error in sourceu
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
coralogix_zio-k8s{
  java.version = 17 
  projects.overrides {
    // Does not compile, quicklens source compat
    zio-k8s-client-quicklens.tests = disabled
  }
}
cognitedata_cognite-sdk-scala {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
com-lihaoyi_fastparse.projects.exclude = ["com.lihaoyi%pythonparse"] // Needs python
com-lihaoyi_unroll {
  source-patches = [{ 
    path = "unroll/plugin/src-3/UnrollPluginScala3.scala"
    pattern      = "def init(options: List[String]): List[PluginPhase]"
    replace-with = "override def init(options: List[String]): List[PluginPhase]" 
  }]
}
coursier_class-path-util.tests = compile-only // no tests, scala-cli

dacr_zio-lmdb.java.version = 17
danslapman_morphling{
  projects.exclude = [morphling-circe] // Needs update due to source compatible change
}
dapperware_dappermongo.tests = compile-only // test containers
davenverse_fuuid{
  sbt.commands = [
    // Disable intergration tests using test containers
    """set doobie/Test/unmanagedSources/excludeFilter ~= {_ || "PostgresInstanceSpec.scala" || "PostgresTraversalSpec.scala"} """ 
  ]
}
delimobil_fs2-hbase.tests = disabled // Does not compile with any Scala version
dfianthdl_dfiant.source-version = 3.4 // implicits ordering
disneystreaming_smithy4s {
  projects.overrides {
    // Infinite loop in OperationSpec
  }
}
disneystreaming_smithy-translate {
  source-patches = [{
    path = "buildSetup.sc"
    pattern      = "case ZincWorkerUtil.DottyVersion(\"0\","
    replace-with = "case ZincWorkerUtil.Scala3Version("
  }]
}
disneystreaming_weaver-test {
  sbt.options=["-Dcommunitybuild.dualVersion=minor:+1"]
}

earogov_ordset{
  source-patches = [{ 
    path = "build.sc"
    pattern      = """"-comment-syntax", "wiki""""
    replace-with = """"-comment-syntax:wiki""""
   }]
  projects.overrides {
    ordset.tests = disabled // https://github.com/scala/scala3/issues/15820 does not compile
  }
}
eed3si9n_ifdef {
  source-patches = [{ 
    path = "compiler-plugin/src/main/scala-3/IfDefPlugin.scala"
    pattern      = "def init(options: List[String]): List[PluginPhase]"
    replace-with = "override def init(options: List[String]): List[PluginPhase]" 
  }]
}
eikek_binny {
  java.version = 11
}
epfl-lara_lisa{
  projects.exclude=["scallion", "scallion-examples", "scallion-benchmarks"]
  tests = compile-only // exit on failure
}
endless4s_endless {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
endless4s_endless-transaction {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
endpoints4s_endpoints4s{
  projects.overrides{
    http4s-server.tests = disabled // does not compile
  }
}

enriquerodbe_borsh4s {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
erikerlandson_coulomb {
  source-version = 3.4 // implicits
  projects.exclude = ["com.manyangled%coulomb-docs"] // Fails in scaladoc, needs SN nscplugin which might not be published yet
}
etorreborre_specs2 {
  projects{
    exclude = ["specs2-guide", "specs2-cats", "specs2-scalaz", "xml"]
    overrides {
    }
  }
  sbt.commands = [
    """set core.jvm/Test/unmanagedSources/excludeFilter ~= { _ || "TimeoutSpec.scala"  || "ThrowablexSpec.scala"}"""
    """set tests.jvm/Test/unmanagedSources/excludeFilter ~= { _ || "FileMatchersSpec.scala" || "TerminationMatchersSpec.scala"} """
  ]
}

fd4s_fs2-kafka{
  sbt.commands = [
    // Disable intergration tests using test containers
    """set core/Test/unmanagedSources/excludeFilter ~= {_ || "KafkaProducerConnectionSpec.scala" || "KafkaConsumerSpec.scala" || "KafkaProducerSpec.scala" || "TransactionalKafkaProducerSpec.scala" || "TransactionalKafkaProducerTimeoutSpec.scala" || "KafkaAdminClientSpec.scala"} """
  ]
}
fgrutsch_emergence.source-version = 3.4
firstbirdtech_emergence.source-version = 3.4
fomkin_korolev {
  projects.exclude=[
    "org.fomkin%korolev-http4s", # Conflicting cross Scala versions _3 vs _2.13
    "org.fomkin%korolev-pekko" # missing
  ]
  tests = compile-only //deadlocks in the CB
}
frawa_typed-json.projects.overrides {
  typed-json.tests = disabled // tries to read non-existing file
}

garlandus_augment.java.version=17
gchudnov_swearwolf.sbt.commands = ["disableFatalWarnings"]
geirolz_fly4s.tests = compile-only // flaky
geirolz_secret.source-version=3.4 // implicts
gemini-hlsw_gsp-graphql.tests = compile-only // uses Docker
gemini-hlsw_lucuma-itc.java.version = 17
getkyo_kyo {
  java.version = 21
  source-version = 3.4
}
guntiso_mojoz.java.version = 8
guymers_ceesvee {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
  tests = compile-only // flaky
}
guymers_foobie {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
giabao_asm-flow.tests = disabled // Does not compile
ghostdogpr_caliban.java.version = 17
guardian_etag-caching.java.version = 17
gvolpe_trading {
  sbt.commands = [
    "excludeLibraryDependency com.github.ghik:zerowaste_{scalaVersion}"
  ]
}
gzoller_scalajack {
  // Uses internal compiler plugin without full cross-version. Fails in runtime
  sbt.commands = ["""set scalajack/Test/unmanagedSources/excludeFilter ~= { _ || "AnyPrim.scala" || "Arrays.scala" || "AnyColl.scala" }"""]
}

h8io_borscht{
  projects.overrides{
    template-apache-commons-text.tests = compile-only // missing resources
  }
}
hedgehogqa_scala-hedgehog{
    // -siteroot in Compile/scalacOptions since 3.0.2+ gives a warnings
  sbt.commands = ["disableFatalWarnings"]
}
haifengl_smile { 
  java.version = 17
}
higherkindness_droste {
  sbt.commands = ["disableFatalWarnings"]
}
hnaderi_edomata{
  projects.exclude = ["edomata-docs"] // Requires Scala Native compiler plugin
}
hnaderi_named-codec{
  projects.exclude = ["named-codec-docs"] // Requires Scala Native compiler plugin
}
hnaderi_yaml4s {
  projects.exclude = ["yaml4s-docs"] // Requires Scala Native compiler plugin
}
hsci-r_lucene-perfieldpostingsformatordtermvectorscodec.tests = disabled // does not compile
http4s_http4s.sbt.commands = [
    "set every unidoc/unidocAllSources := Nil" // unidoc sometimes leads to deadlock/timeout when run in container
  ]

indoorvivants_subatomic{
  sbt.commands = [
      """set every Test/unmanagedSources/excludeFilter := HiddenFileFilter || "MdocJSTests.scala"""" 
      "disableFatalWarnings"
    ]
}
indoorvivants_weaver-playwright.tests = compile-only // uses scripts
ingarabr_gcs-lock.tests = compile-only // uses gcloud
irevive_union-derivation.tests = compile-only // fails due to changes in report messages
ist-dsi_scala-keystone-client.tests = compile-only // uses docker

japgolly_test-state {
  projects.overrides{
  }
}
jbwheatley_pact4s.sbt.commands = ["""set shared/scalacOptions --= Seq("-Wconf:cat=deprecation:i", "-Xfatal-warnings") """]
jchapuis_fs2-kafka-mock {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
  source-patches = [
    { 
      path = "src/test/scala/io/github/jchapuis/fs2/kafka/mock/MockKafkaProducerSuite.scala"
      pattern      = "implicit val patience = MockKafkaProducer.Patience"
      replace-with = "implicit val patience: MockKafkaProducer.Patience = MockKafkaProducer.Patience" 
    }
  ]
}
jcouyang_dhall-generic.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
joan38_kubernetes-client {
  source-patches = [
    { 
      path = "build.sc"
      pattern      = "case \"3.[0-9]+.[0-9]+\""
      replace-with = "case \"<SCALA_VERSION>\"" 
    }
  ]
  tests = compile-only  
}
jobial-io_scase{
  projects.exclude=["io.jobial%scase-lambda-scala3-example"] 
}
jodersky_scala-argparse{
  projects.exclude=[
    "io.crashbox%configparse"
    "io.crashbox%configparse-core"
  ] 
}
jodersky_scalapb-ujson{
  tests = disabled // starts failing process (proto gen?)
}
joernio_joern{
  projects.overrides{
    x2cpg.tests = compile-only // Requires mvn binary
    jssrc2cpg.tests = compile-only // Requires joernio/astgen installed via npm
  }
  projects.exclude=[php2cpg] // Malformed setup file
}
json4s_json4s.source-version=3.3
jwojnowski_googlecloud4s.tests = compile-only // uses docker
jvican_dijon.projects.exclude = ["me.vican.jorge%monix-grpc-codegen", "me.vican.jorge%monix-grpc-runtime"] // missing
j5ik2o_akka-persistence-dynamodb.projects.exclude = ["com.github.j5ik2o%event-store-adapter-scala"] // missing

kamon-io_kamon{
  java.version = 8
}
karelcemus_play-redis {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}	
katrix_minejson.tests = disabled // Does not compile, build issue
kierendavies_skunk-migrate.tests = compile-only 
kitlangton_neotype.java.version = 17
kevin-lee_extras{
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}	
kevin-lee_just-semver{
  projects.exclude = ["io.kevinlee%just-semver"] // aggregate project adding dependency on coreJS
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
kevin-lee_just-sysprocess{
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion} com.olegpy:better-monadic-for_3",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
kevin-lee_maven2sbt	{
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
kevin-lee_refined4s	{
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
kevin-lee_openai4s{
  source-version = 3.4
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
kelvindev15_pps-22-prolog-as-scaladsl{
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
kostaskougios_functions-remote.java.version = 21
# kostaskougios_terminal21-restapi {
# Keep testing it for the purpouse of Scala LTS, let it fail on Scala Next.  
# // Uses functions-remote code generator which expects Scala 3.3 Tasty at most
#   projects.exclude = [
#     io.github.kostaskougios%terminal21-ui-std,
#     io.github.kostaskougios%terminal21-nivo,
#     io.github.kostaskougios%terminal21-spark,
#     io.github.kostaskougios%terminal21-mathjax
#   ]
# }
kubukoz_drops {
  sbt.commands = ["excludeLibraryDependency org.polyvariant:better-tostring_{scalaVersion}"]
}
kubukoz_spotify-next {
  sbt.commands = ["excludeLibraryDependency org.polyvariant:better-tostring_{scalaVersion}"]
}
kubukoz_sup {
  sbt.commands = ["excludeLibraryDependency org.polyvariant:better-tostring_{scalaVersion}"]
}

laserdisc-io_fs2-aws{
  sbt.commands = ["disableFatalWarnings"]
}
lichess-org_lila.java.version = 21
lichess-org_playframework-lila.java.version = 21
lichess-org_scalachess { 
  tests = compile-only // Deadlocks in containers
  # import chess.format.pgn.PgnHelper.*
  source-patches = [{ 
      path = "bench/src/main/scala/benchmarks/PgnBench.scala"
      pattern      = "import chess.format.pgn.PgnHelper.*" // does not exist
      replace-with = ""
    }]
}
liewhite_common.source-patches = [
    { 
      path = "build.sbt"
      pattern      = "scalaVersion := scala3Version" // No such field defined
      replace-with = """scalaVersion := "<SCALA_VERSION>" """
    }
  ]
linyxus_papiers-core.tests = compile-only // flaky
lloydmeta_enumeratum{
  sbt.options=["-Denumeratum.useLocalVersion=true"]
}
logging4s_logging4s.java.version = 17
lorandszakacs_enclosure.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
losizm_little-sql.java.version = 8
losizm_scamper{
  java.version = 8
}
markehammons_slinc {
  java.version = 21
}
mateuszkubuszok_pipez{
  source-patches = [
    { 
      path = "project/Settings.scala"
      pattern      = "case Some((3, 2))"
      replace-with = "case Some((3, _))"
    }
  ]
}
marchliu_jaskell-dotty.sbt.commands = ["""set Compile/sources ~= (_.filter(_.getName != "NewLine.scala")) """] // Duplicates with Newline.scala
martinhh_scalacheck-derived.source-version=3.3
mercurievv_minuscles.projects.exclude=["io.github.mercurievv.minuscles%conversions"] // missing
metarank_ltrlib.tests = disabled // used Scala 2 macro
mccarthy_fetch{
  # https://github.com/scala/scala3/issues/15843
  sbt.commands = ["set awsTextract/Compile/doc/sources := Nil"]
}
medeia_medeia{
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
mjakubowski84_parquet4s.java.version = 8
monix_minitest.sbt.commands    = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
monix_implicitbox.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
mvv_sager {
  source-version = 3.4
  sbt.commands = ["disableFatalWarnings"]
}
mvv_typine.sbt.commands = ["disableFatalWarnings"]

nafg_css-dsl.projects.exclude = [
   // codegen fails
  "io.github.nafg.css-dsl%fomanticui_scalajsreact",
  "io.github.nafg.css-dsl%fomanticui_scalatags",
  "io.github.nafg.css-dsl%bulma_scalatags",
  "io.github.nafg.css-dsl%bulma_scalajsreact"
]
nau_scalus {
  source-version = 3.4
}
neandertech_langoustine.source-version = 3.4
noelwelsh_mads.sbt.commands = ["disableFatalWarnings"]

palanga_parana.tests = compile-only // usses cassandra instance
pityka_lamp{
  java.version=17
  tests = compile-only // uses native libraries
}
pjfanning_akka-rabbitmq.sbt.commands = ["""set every Test/unmanagedSources/excludeFilter := HiddenFileFilter || "PublishSubscribeSpec.scala""""]
pjfanning_jackson-scala3-reflection-extensions.tests = compile-only // uses
pjfanning_pekko-http-session.java.version = 17
pjfanning_scala3-reflection {
  source-patches = [{ 
    path = "src/main/scala/co.blocke.scala_reflection/ReflectionWorker.scala"
    pattern      = "def init(options: List[String]): List[PluginPhase]"
    replace-with = "override def init(options: List[String]): List[PluginPhase]" 
  }]
}
plokhotnyuk_jsoniter-scala {
  sbt.commands = ["""set every Test/unmanagedSources/excludeFilter := HiddenFileFilter || "JsonCodecMakerNewTypeSpec.scala" """]
}
polynote_uzhttp {
  source-patches = [
    { 
      path = "build.sbt"
      pattern      = """if (scalaVersion.value != "3.*")"""
      replace-with = """if (scalaVersion.value != "<SCALA_VERSION>")"""
    }
  ]
}
polyvariant_colorize-scala {
  sbt.commands = ["excludeLibraryDependency org.polyvariant:better-tostring_{scalaVersion}"]
}
polyvariant_scodec-java-classfile {
  sbt.commands = ["excludeLibraryDependency org.polyvariant:better-tostring_{scalaVersion}"]
}
polyvariant_respectfully {
  sbt.commands = ["excludeLibraryDependency org.polyvariant:better-tostring_{scalaVersion}"]
}
polyvariant_smithy4s-caliban {
  sbt.commands = ["excludeLibraryDependency org.polyvariant:better-tostring_{scalaVersion}"]
}
polyvariant_treesitter4s {
  sbt.commands = ["excludeLibraryDependency org.polyvariant:better-tostring_{scalaVersion}"]
}
paulbutcher_scalamock {
  source-patches = [{
    path = "jvm/src/test/scala/com.paulbutcher.test/mock/JavaMocksTest.scala"
    pattern      = "m.simplePolymorphicMethod _"
    replace-with = "m.simplePolymorphicMethod[Int] _"
  }]
}
profunktor_neutron.tests = compile-only // Deadlocks in CI
pureharm_pureharm-db-core{
  projects.exclude = [
    "com.busymachines%pureharm-db-testkit-ce2"
    "com.busymachines%pureharm-db-test-data"
    "com.busymachines%pureharm-db-test-data-ce2"
    "com.busymachines%pureharm-db-testkit"
  ]
}

reactivemongo_reactivemongo {
  source-version = 3.4
  projects.exclude = ["org.reactivemongo%reactivemongo-alias"] // missing
  projects.overrides = {
    reactivemongo {
      // Actual tests needs env set up
    }
  }
}
reactivemongo_reactivemongo-bson {
  projects.exclude = ["reactivemongo-jmx", "reactivemongo-datadog", "reactivemongo-kamon"]
  projects.overrides = {
  }
}
reactivemongo_reactivemongo-play-json.tests = compile-only // fails due to changes in reported error messages
rmgk_slips.java.version = 17
ruimo_csvparser.tests = disabled // does not compile
ruimo_graphics.tests = disabled // does not compile
ruimo_scoins.tests = disabled // does not compile

sageserpent-open_americium{
  java.version = 17
}
sageserpent-open_kineticmerge{
  java.version=17
}
scala_toolkit.tests = disabled // no tests
scala-cli_libdaemon-jvm {
  java.version=17
}
scala-native_scala-native.tests = compile-only  
scalacenter_simple-rockets-compiler {
  # multi string settings need to use `:` since 3.2
  sbt.commands = ["""set core/Compile/doc/scalacOptions ~= {_.diff(Seq("-comment-syntax", "wiki")) ++ Seq("-comment-syntax:wiki")}"""]
}
scalacenter_tasty-query.tests = disabled // does not compile
scalamolecule_molecule.tests = disabled // does not compile, try restore in the future
scalatest_scalatest {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat",
    // From managged community build https://github.com/scala/scala3/blob/fb7f900667ea57e78a098e4831be36e0a7da6cba/community-build/src/scala/dotty/communitybuild/projects.scala#L293
    """set scalatestTestDotty/Test/managedSources ~= (_.filterNot(v => Seq("GeneratorSpec.scala", "FrameworkSuite.scala", "WaitersSpec.scala", "TestSortingReporterSpec.scala", "JavaFuturesSpec.scala", "ParallelTestExecutionSpec.scala", "TimeLimitsSpec.scala", "DispatchReporterSpec.scala", "TestThreadsStartingCounterSpec.scala", "SuiteSortingReporterSpec.scala", "CommonGeneratorsSpec.scala", "PropCheckerAssertingSpec.scala", "ConductorMethodsSuite.scala", "EventuallySpec.scala").contains(v.getName) ))""",
    """set scalacticTestDotty/Test/managedSources ~= (_.filterNot(_.getName == "NonEmptyArraySpec.scala"))""",
    """set genRegularTests4/Test/managedSources ~= (_.filterNot(v => Seq("FrameworkSuite.scala", "GeneratorSpec.scala", "CommonGeneratorsSpec.scala", "ParallelTestExecutionSpec.scala", "DispatchReporterSpec.scala", "TestThreadsStartingCounterSpec.scala", "EventuallySpec.scala").contains(v.getName) ))"""
  ]
  java.version=8
  # Missing mappings, maybe generated by sbt
  projects.exclude=["org.scalatest%scalatest-app"]
}
scalatest_scalatestplus-easymock   { sbt.commands = ["set Compile/doc/skip := true"] }
scalatest_scalatestplus-jmock      { sbt.commands = ["set Compile/doc/skip := true"] }
scalatest_scalatestplus-junit      { sbt.commands = ["set Compile/doc/skip := true"] }
scalatest_scalatestplus-mockito    { sbt.commands = ["set Compile/doc/skip := true"] }
scalatest_scalatestplus-scalacheck { sbt.commands = ["set Compile/doc/skip := true"] }
scalatest_scalatestplus-selenium   { sbt.commands = ["set Compile/doc/skip := true"] }
scalatest_scalatestplus-scalacheck { sbt.commands = ["set scalatestPlusScalaCheckJVM/Compile/doc/skip := true"] }
scalapatisserie_muffin.source-version = 3.4 // implicits	
scalapb_scalapb {
// Upstream is compiled with Java 11
  tests = compile-only // disabled due to usage of scalaOutputVersion, breaks due to changes in LazyVals
  java.version = 11
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
  source-patches = [{
    path = "build.sbt"
    pattern      = "setScalaOutputVersion"
    replace-with = ""
  }]
}
scalaz_scalaz {
  sbt {
    commands = ["set every unidoc/unidocAllSources := Nil"] // in Scala 3.1.0+ gets into infinite loop when run in containers
  }
}
scf37_hottie.tests = compile-only // Uses dotc.Main, works locally, fails in container
sciss_soundprocesses{
  projects.exclude=["de.sciss%soundprocesses-compiler"] // Fails to compile after changes to compiler API in 3.1.3
}
scodec_scodec-cats.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
scottweaver_testcontainers-for-zio {
  sbt.commands = ["set every semanticdbEnabled := false"]
}
scoverage_scalac-scoverage-plugin{
  projects.overrides {
    # Fails in runtime times due to changed error messages
  }
}
simy4_coregex.java.version = 11 // scaldoc/javadoc fails in Java 8  due to incorrect flags
sky-uk_kafka-topic-loader.tests = compile-only // timeouts
softwaremill_akka-http-session {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
softwaremill_ox {
  java.version=21
  sbt.options = ["-J--enable-preview" "-J--add-modules=jdk.incubator.concurrent"]
}
softwaremill_sttp {
  sbt {
    commands=["set every closeClassLoaders := false"]
  }
  projects.exclude=[
    # Does not compile - we publish ZIO 1.x
    "com.softwaremill.sttp.client3%zio.*"
  ]
}
softwaremill_tapir {
  java.version=21
  sbt.options=["-J-XX:+UseG1GC"]
  sbt.commands=["set vertxServerZio.jvm(true)/Compile/doc/sources := Nil"]
  projects.overrides {
    tapir-sttp-client-ws-zio.tests = compile-only  
    // Deadlocks when executing in minikube
    // Timeout
  }
}
softwaremill_tapir-loom {
  java.version=21
}
staeff777_scalaveusz.tests = disabled // Does not compile with any Scala version 
swagger-akka-http_swagger-pekko-http.tests = compile-only // depends on experimental compiler
systemfw_dynosaur.java.version = 11

reactivemongo_reactivemongo {
  projects.exclude=[
    "reactivemongo%reactivemongo-alias" # Not a part of the main repo, defined in reactivemongo-shaded
  ]
}
rssh_cps-async-connect {
  source-version = 3.4
  java.version = 21
}


t2v_holidays.tests = compile-only // invalid classpath at runtime
taig_backmail.source-version=3.4
taig_scala-linguist.projects.exclude=["io.taig%scala-linguist-graalvm-ruby"] // needs GraalVM
taig_scala-pygments.projects.exclude=["io.taig%scala-pygments-graalvm-python"]
testcontainers_testcontainers-scala{
  java.version = 17
}
tharwaninitin_etlflow {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
tharwaninitin_cron4zio {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
tharwaninitin_gcp4zio {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}
thoughtworksinc_binding.scala {
  // Not a part of the repositroy
  projects.exclude=[
    "com.thoughtworks.binding%bindable-bindableseq"
    "com.thoughtworks.binding%covariantstreamt",
    "com.thoughtworks.binding%defaultfuture"
    "com.thoughtworks.binding%keywords-bind"
    "com.thoughtworks.binding%patchstreamt"
    "com.thoughtworks.binding%streamt"
  ]
}
torrentdam_bencode.tests = disabled // needs ScalaNative nscplugin
tpolecat_doobie {
  projects.overrides{
    // as per https://github.com/scala/community-builds/pull/835#issuecomment-455729365,
    // these subprojects require a Postgres instance for the tests to run
  }
}
trace4cats_trace4cats {
  projects.exclude = [
    // Not part of the build, incorect metadata in other builds
    "io.janstenpickle%trace4cats-dynamic-sampling-http-server"
    "io.janstenpickle%trace4cats-dynamic-sampling-http4s"
  ]
}
travisbrown_dhallj {
  sbt.commands=["javacc"]
  projects.overrides {
    // Uses data fetched from outside repo
  }
}
twitter_util {
  projects.overrides {
    util-security.tests = compile-only // Fails in the container
  }
}
typelevel_cats.tests = compile-only // flaky test
typelevel_cats-effect {
  source-patches = [{
    // https://github.com/scala/scala3/issues/15920
    path = "core/shared/src/main/scala/cats/effect/IO.scala"
    pattern      = "Right(t.asLeft\\[IO\\[B\\]\\], limit - 1)"
    replace-with = "(t.asLeft, limit - 1).asRight"
  }]
}
typelevel_cats-mtl {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
}
typelevel_coop {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
}
typelevel_discipline-scalatest {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
}
typelevel_jawn {
  projects.exclude=[
    "com.eed3si9n%shaded-jawn-parser"
  ]
}
typelevel_laika {
  java.version = 11
  projects.exclude = ["org.typelevel%laika-docs"]
}

ua-parser_uap-scala.tests = compile-only 
unibas-gravis_scalismo.tests = compile-only // Uses native library
unfiltered_unfiltered.tests = disabled // https://github.com/unfiltered/unfiltered/blob/9432d75e3a0f080fc926236ebc4e83518c884351/build.sbt#L8-L17

wvlet_airframe {
  java.version = 17
  projects{
    exclude=[
      "org.wvlet.airframe%airspec" # Inner sbt project, no mechanism to handle that currently
    ]
    overrides{
      //https://github.com/wvlet/airframe/issues/1077
    }
  }
}

vagmcs_optimus{
  projects.exclude=[".*solver-mosek", ".*solver-gurobi"] // Missing downloadable jar
  tests = compile-only // Fails locally
}
vigoo_desert.java.version=17
vigoo_prox.tests = compile-only 
virtuslab_scala-cli {
  java.version=17
  projects.overrides{
    directives.tests = compile-only // uses Scala 3.0.2 runner
  }
}
vladkopanev_cats-saga.source-patches = [
  {
    path = "core/src/test/scala/com/vladkopanev/cats/saga/SagaLawsSpec.scala"
    pattern      = "implicit val ticker = Ticker()"
    replace-with = "implicit val ticker: Ticker = Ticker()"
  },
  {
    path = "core/src/test/scala/com/vladkopanev/cats/saga/CatsSagaSpec.scala"
    pattern      = "bookCar compensateIfFail"
    replace-with = "bookCar.compensateIfFail"
  }
]

xuwei-k_wartremover-scalikejdbc {
  sbt.commands = [
    "excludeLibraryDependency org.wartremover:wartremover_{scalaVersion}",
    "removeScalacOptionsStartingWith -P:wartremover"
  ]
}

zaneli_scalikejdbc-athena{
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
}
zio_interop-cats.source-patches = [
  { 
    path = "project/BuildHelper.scala"
    pattern      = "case Some((3, 3))"
    replace-with = "case Some((3, _))"
  }
]
zio_zio-config {
  projects.overrides = {
    // Problem with ZIO deps
    zio-config-magnolia.tests = disabled
    // No Refined macros for Scala 3 
    zio-config-refined.tests = disabled
  }
}
zio_zio_http{
  projects.exclude = ["dev.zio%zio-http-testkit-shaded", "dev.zio%zio-http-shaded"] // missing
}
zio_zio-json {
  projects.overrides {
    zio-json-interop-refined.tests = disabled
  }
}
zio_zio-logging {
  sbt.commands = [disableFatalWarnings]
}
zio_zio-profiling {
  source-patches = [{
    path = "zio-profiling-tagging-plugin/src/main/scala-3/zio/profiling/plugins/TaggingPlugin.scala"
    pattern      = "def init(options: List[String]): List[PluginPhase]"
    replace-with = "override def init(options: List[String]): List[PluginPhase]" 
  }]
}
zio_zio-protoquill {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
}
zio_zio-quill {
  sbt.options=["-Dquill.scala.version=<SCALA_VERSION>"]
}
