# Content of this file is expected to be moved into actual projects in the future

akka_akka {
  // Based on Scala3 managed community build
  tests = compile-only
  sbt.commands = [
    "set every targetSystemJdk := true",
    """set actor/Compile/scalacOptions -= "-Xfatal-warnings"""",
    """set testkit/Compile/scalacOptions -= "-Xfatal-warnings"""",
    """set actorTests/Compile/scalacOptions -= "-Xfatal-warnings"""",
  ]
}
apimorphism_telegramium.tests = compile-only
armanbilge_litter.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
armanbilge_feral.projects.exclude = [
  // Not present in the repo
  "com.armanbilge%feral-lambda-events",
  "com.armanbilge%feral-lambda-natchez",
  "com.armanbilge%feral-lambda-api-gateway-proxy-http4s"
]
ashwinbhaskar_sight-scala.sbt.commands = [
   """set root/Test/unmanagedSources/excludeFilter ~= { _ || "IntegrationTest.scala" }"""
]
atnos-org_eff {
  sbt.commands = [
    """set monixJVM/Test/unmanagedSources ~= (_.filterNot(_.getName == "TaskEffectSpec.scala"))"""
  ]
}
augustjune_canoe {
  sbt.commands = [
    """set core.jvm/Test/unmanagedSources/excludeFilter ~= { _ || "BroadcastSpec.scala" || "BotSpec.scala" }"""
  ]
}
avast_datadog4s.java.version=11

bilal-fazlani_akka-http-jwt-auth.tests = compile-only

carueda_tscfg.sbt.commands = ["genCode"]
clockworkconsulting_peregrin.tests = compile-only
clulab_fatdynet.tests = compile-only
com-lihaoyi_requests-scala.tests = compile-only

dacr_jassh.tests = compile-only
darrenjw_scala-glm.tests = compile-only
davenverse_fuuid{
  sbt.commands = [
    // Disable intergration tests using test containers
    """set doobie/Test/unmanagedSources/excludeFilter ~= {_ || "PostgresInstanceSpec.scala" || "PostgresTraversalSpec.scala"} """ 
  ]
}
davenverse_rediculous.tests = compile-only
davenverse_rediculous-concurrent.tests = compile-only
davenverse_whale-tail.tests = compile-only
delimobil_cabbit.tests = compile-only
disneystreaming_smithy4s {
  projects.overrides {
    // Infinite loop in OperationSpec
    smithy4s-dynamic.tests = compile-only
  }
  source-patches = [
   { 
    path = "modules/dynamic/src/smithy4s/dynamic/internals/DynamicModelCompiler.scala"
    pattern      = "outputSchema <- getSchema(output).map(_.withHints(InputOutput.Output)),"
    replace-with = "outputSchema <- getSchema(output).map(_.withHints(InputOutput.Output))"
   }
  ]
}
disneystreaming_weaver-test {
  sbt.options=["-Dcommunitybuild.dualVersion=minor:+1"]
}
dobrynya_zio-jms.tests = compile-only
dream11_zio-http.tests = compile-only

eikek_binny.tests = compile-only
etorreborre_specs2 {
  projects{
    exclude = ["specs2-guide"]
    overrides {
      specs2-form.tests = compile-only
    }
  }
  sbt.commands = [
    """set core.jvm/Test/unmanagedSources/excludeFilter ~= { _ || "TimeoutSpec.scala"  || "ThrowablexSpec.scala"}"""
    """set tests.jvm/Test/unmanagedSources/excludeFilter ~= { _ || "FileMatchersSpec.scala" || "TerminationMatchersSpec.scala"} """
  ]
}

fomkin_korolev {
  projects.exclude=[
    "org.fomkin%korolev-http4s" # Conflicting cross Scala versions _3 vs _2.13
  ]
  tests = compile-only //deadlocks in the CB
}

fd4s_fs2-kafka{
  sbt.commands = [
    // Disable intergration tests using test containers
    """set core/Test/unmanagedSources/excludeFilter ~= {_ || "KafkaProducerConnectionSpec.scala" || "KafkaConsumerSpec.scala" || "KafkaProducerSpec.scala" || "TransactionalKafkaProducerSpec.scala" || "TransactionalKafkaProducerTimeoutSpec.scala" || "KafkaAdminClientSpec.scala"} """
  ]
}
fs2-blobstore_fs2-blobstore.tests = compile-only

geirolz_scope.tests = compile-only
giabao_paho-akka.tests = compile-only
giiita_refuel.tests = compile-only

hedgehogqa_scala-hedgehog{
  sbt.commands = [
    // -siteroot in Compile/scalacOptions since 3.0.2+ gives a warnings
    """set coreJVM     / Compile/scalacOptions -= "-Xfatal-warnings" """
    """set runnerJVM   / Compile/scalacOptions -= "-Xfatal-warnings" """
    """set testJVM     / Compile/scalacOptions -= "-Xfatal-warnings" """
    """set sbtTestJVM  / Compile/scalacOptions -= "-Xfatal-warnings" """
    """set minitestJVM / Compile/scalacOptions -= "-Xfatal-warnings" """
  ]
}
higherkindness_droste {
  sbt.commands = [
    """set scalacheck.jvm/Compile/scalacOptions -= "-Xfatal-warnings""""
  ]
}
hnaderi_edomata.tests = compile-only
http4s_blaze.tests = compile-only
http4s_http4s {
  sbt.commands = [
    """set blazeClient/ Test/unmanagedSources/excludeFilter := HiddenFileFilter || "BlazeClientSuite.scala" || "BlazeHttp1ClientSuite.scala" || "ClientTimeoutSuite.scala""""
    """set blazeServer/ Test/unmanagedSources/excludeFilter := HiddenFileFilter || "Http1ServerStageSpec.scala""""
    """set tomcatServer/Test/unmanagedSources/excludeFilter := HiddenFileFilter || "TomcatServerSuite.scala""""
    "set every unidoc/unidocAllSources := Nil" // unidoc sometimes leads to deadlock/timeout when run in container
  ]
}
hughsimpson_scalameter.tests = compile-only

ij-plugins_ijp-color.tests = compile-only
ij-plugins_ijp-javacv.tests = compile-only
ij-plugins_ijp-toolkit.tests = compile-only
indoorvivants_sn-bindgen.tests = compile-only
itv_quartz4s.tests = compile-only

japgolly_scala-graal.tests = compile-only
japgolly_test-state {
  projects.overrides{
    ext-selenium.tests = compile-only
    dom-zipper-selenium.tests = compile-only
  }
}
joernio_joern{
  projects.overrides{
    x2cpg.tests = compile-only // Requires mvn binary
  }
}
j5ik2o_akka-persistence-s3.tests = compile-only
j5ik2o_docker-controller-scala.tests = compile-only

laserdisc-io_fs2-aws.tests = compile-only
lorandszakacs_enclosure.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
losizm_scamper.tests = compile-only

mjakubowski84_parquet4s.java.version = 8
mkroli_dns4s.tests = compile-only
monix_minitest.sbt.commands    = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
monix_implicitbox.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]

naoh87_lettucef.tests = compile-only

ohze_php-utils.tests = compile-only
outr_scarango.tests = compile-only

pdal_java.tests = disabled // Needs cmake in tests
pjfanning_akka-rabbitmq.sbt.commands = ["""set every Test/unmanagedSources/excludeFilter := HiddenFileFilter || "PublishSubscribeSpec.scala""""]
polynote_uzhttp {
  source-patches = [
    { 
      path = "build.sbt"
      pattern      = """if (scalaVersion.value != "3.*")"""
      replace-with = """if (scalaVersion.value != "<SCALA_VERSION>")"""
    }
  ]
}
postgresql-async_postgresql-async.tests = compile-only

rediscala_rediscala.tests = compile-only
reactivemongo_reactivemongo {
  projects.overrides = {
    reactivemongo {
      // Actual tests needs env set up
      tests = compile-only
    }
  }
}

sageserpent-open_americium.tests = compile-only
scala-cli_libdaemon-jvm.java.version=17
scala-native_scala-native.tests = compile-only  
scalafx_scalafx.tests = compile-only
scalatest_scalatest {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat",
    // From managged community build https://github.com/lampepfl/dotty/blob/fb7f900667ea57e78a098e4831be36e0a7da6cba/community-build/src/scala/dotty/communitybuild/projects.scala#L293
    """set scalatestTestDotty/Test/managedSources ~= (_.filterNot(v => Seq("GeneratorSpec.scala", "FrameworkSuite.scala", "WaitersSpec.scala", "TestSortingReporterSpec.scala", "JavaFuturesSpec.scala", "ParallelTestExecutionSpec.scala", "TimeLimitsSpec.scala", "DispatchReporterSpec.scala", "TestThreadsStartingCounterSpec.scala", "SuiteSortingReporterSpec.scala", "CommonGeneratorsSpec.scala", "PropCheckerAssertingSpec.scala", "ConductorMethodsSuite.scala", "EventuallySpec.scala").contains(v.getName) ))""",
    """set scalacticTestDotty/Test/managedSources ~= (_.filterNot(_.getName == "NonEmptyArraySpec.scala"))""",
    """set genRegularTests4/Test/managedSources ~= (_.filterNot(v => Seq("FrameworkSuite.scala", "GeneratorSpec.scala", "CommonGeneratorsSpec.scala", "ParallelTestExecutionSpec.scala", "DispatchReporterSpec.scala", "TestThreadsStartingCounterSpec.scala", "EventuallySpec.scala").contains(v.getName) ))"""
  ]
  java.version=8
}
scala-native_scala-native-cli.tests = compile-only
scalanlp_breeze {
  sbt.commands=[
    // flaky tests
    """set math/Test/unmanagedSources/excludeFilter := HiddenFileFilter || "OptimizationSpaceTest.scala" || "LinearAlgebraTest.scala" || "DenseMatrixTest.scala" || "CSCMatrixTest.scala" || "LUTest.scala" || "ProjectedQuasiNewtonTest.scala" || "InvGammaTest.scala" """
  ]
}
// is Upstream compiled with Java 11
scalapb_scalapb.java.version = 11
scalapy_scalapy.tests = compile-only
scalaz_scalaz {
  sbt {
    options = ["-J-Xmx5g"]
    commands = ["set every unidoc/unidocAllSources := Nil"] // in Scala 3.1.0+ gets into infinite loop when run in containers
  }

}
scalikejdbc_scalikejdbc.tests = compile-only
scalikejdbc_scalikejdbc-async.tests = compile-only
sciss_soundprocesses.tests = compile-only
scodec_scodec-cats.sbt.commands = ["set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"]
scottweaver_testcontainers-for-zio.tests = compile-only
seratch_awscala.tests = compile-only
sirthias_scala-ssh.tests = compile-only
softwaremill_sttp {
  sbt {
    options=["-J-Xmx5g"]
    commands=["set every closeClassLoaders := false"]
  }
  tests = compile-only
  projects.exclude=[
    # Does not compile - we publish ZIO 1.x
    "com.softwaremill.sttp.client3%zio.*"
  ]
}
softwaremill_tapir {
  sbt.options=["-J-Xmx5g", "-J-Xss2M"]
  projects.overrides {
    tapir-http4s-client.tests = compile-only
    tapir-sttp-client.tests = compile-only
    tapir-sttp-client-ws-zio1.tests = compile-only  
    // Deadlocks when executing in minikube
    tapir-vertx-server.tests = compile-only
  }
}
svroonland_rezilience.tests = compile-only
svroonland_zio-kinesis.tests = compile-only
svroonland_zio-amqp.tests = compile-only
systemfw_dynosaur.java.version = 11

reactivemongo_reactivemongo {
  projects.exclude=[
    "reactivemongo%reactivemongo-alias" # Not a part of the main repo, defined in reactivemongo-shaded
  ]
}
regis-leray_fs2-ftp.tests = compile-only

takezoe_solr-scala-client.tests = compile-only
testcontainers_testcontainers-scala.tests = compile-only
tomasmikula_libretto.tests = compile-only

taig_scala-linguist.projects.exclude=["io.taig%scala-linguist-graalvm-ruby"] // needs GraalVM
taig_scala-pygments.projects.exclude=["io.taig%scala-pygments-graalvm-python"]
tpolecat_doobie {
  projects.overrides{
    // as per https://github.com/scala/community-builds/pull/835#issuecomment-455729365,
    // these subprojects require a Postgres instance for the tests to run
    doobie-hikari.tests = compile-only
    doobie-postgres.tests = compile-only
    doobie-postgres-circe.tests = compile-only
  }
}

trace4cats_trace4cats {
  projects.exclude = [
    // Not part of the build, incorect metadata in other builds
    "io.janstenpickle%trace4cats-dynamic-sampling-http-server"
    "io.janstenpickle%trace4cats-dynamic-sampling-http4s"
  ]
}
trace4cats_trace4cats-datadog.tests = compile-only
trace4cats_trace4cats-jaeger.tests = compile-only
trace4cats_trace4cats-opentelemetry.tests = compile-only
trace4cats_trace4cats-zipkin.tests = compile-only
travisbrown_dhallj {
  sbt.commands=["javacc"]
  projects.overrides {
    // Uses data fetched from outside repo
    dhall-parser.tests = compile-only
  }
}

typelevel_cats-mtl {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
}
typelevel_coop {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
}
typelevel_discipline-scalatest {
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
}
typelevel_jawn {
  projects.exclude=[
    "com.eed3si9n%shaded-jawn-parser"
  ]
}

tharwaninitin_etlflow.tests = compile-only
thoughtworksinc_binding.scala {
  // Not a part of the repositroy
  projects.exclude=[
    "com.thoughtworks.binding%bindable-bindableseq"
    "com.thoughtworks.binding%covariantstreamt",
    "com.thoughtworks.binding%defaultfuture"
    "com.thoughtworks.binding%keywords-bind"
    "com.thoughtworks.binding%patchstreamt"
    "com.thoughtworks.binding%streamt"
  ]
}

unibas-gravis_scalismo.tests = compile-only // Uses native library

wvlet_airframe {
  projects{
    exclude=[
      "org.wvlet.airframe%airspec" # Inner sbt project, no mechanism to handle that currently
    ]
    overrides{
      //https://github.com/wvlet/airframe/issues/1077
      airframe-codec.tests = compile-only
      airframe.tests = compile-only
      airframe-ulid.tests = compile-only
    }
  }
}

virtuslab_scala-cli {
  projects.exclude=[
    // Not yet migrated to Scala 3 projects and its downstream
    // We override all scalaVersion settings leading to erasure of info about depending on 2.13 sub-modules
    "scalaparse", "build", "cli-options", "cli3"
  ]
}

wartremover_wartremover {
  memory-request-mb = 7168
}

y-yu_slick-bulk-insert.tests = compile-only

zio_izumi-reflect.sbt.commands = [
    // Test checks contents of the exception message - it changed between 3.1.1 and 3.1.3
    """set every Test/unmanagedSources/excludeFilter := HiddenFileFilter || "TagProgressionTest.scala""""
]
zio_zio-config {
  projects.overrides = {
    // Problem with ZIO deps
    zio-config-magnolia.tests = disabled 
  }
}
zio_zio-json {
  projects.overrides {
    zio-json-yaml.tests = compile-only
  }
}
zio_zio-protoquill {
  memory-request-mb = 3072
  sbt.commands=[
    "set every Test/classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat"
  ]
  tests = compile-only
}
zio_zio-quill {
  sbt.options=["-Dquill.scala.version=<SCALA_VERSION>"]
}
zio_zio-s3.tests = compile-only
