#!/usr/bin/env -S scala-cli shebang -S 3
//> using toolkit default

val projectDir = sys.env.get("OPENCB_PROJECT_DIR")
  .map(os.Path(_))
  .getOrElse(sys.error("no OPENCB_PROJECT_DIR env"))
  
os.write.append(projectDir / ".mill-jvm-opts", "-XX:CompressedClassSpaceSize=1400m")
  
val scalaVersion = sys.env.get("OPENCB_SCALA_VERSION")
   .getOrElse(sys.error("no OPENCB_SCALA_VERSION env"))

val minJDKVersion = scalaVersion.split('.').take(2).map(_.toInt) match {
  case Array(3, minor) if minor >= 8  => 17
  case _ => 8
}

val millDefsVersion = os.read
  .lines(projectDir / "mill-build"/ "src" / "millbuild"/ "Deps.scala")
  .map(_.trim)
  .collectFirst:
    case s"""val millModuledefsVersion = "$version"""" => version
  .getOrElse(sys.error("Failed to resolve millModuleDefs version"))

val repositoryDir = os.temp.dir(prefix = "mill-moduledefs-")
os.proc("git", "clone", "https://github.com/com-lihaoyi/mill-moduledefs", repositoryDir, "-b", millDefsVersion).call(check = true)

val updatedBuild = os.read(repositoryDir / "build.sc")
  .replaceAll(raw"Cross\[ModuleDefsCross]\(.*\)", s"""Cross[ModuleDefsCross](Seq("3.7.1"))""")
  .replaceAll(raw"Cross\[PluginCross]\(.*\)", s"""Cross[PluginCross](Seq("$scalaVersion"))""")
  .replace(""""-Yexplicit-nulls",""", "")
  .replace(""""-java-output-version", "8""", s""""-java-output-version:${minJDKVersion}""")
os.write.over(repositoryDir / "build.sc", updatedBuild)
os.write.over(repositoryDir / ".mill-version", "0.12.15-2-561986")

val coursierRepositories = Seq(
  "central",
  "ivy2local",
  "https://repo.scala-lang.org/artifactory/maven-nightlies",
  s"https://scala3.westeurope.cloudapp.azure.com/maven2/$scalaVersion",
).mkString("|")

os.proc(
  "./mill",
  "--no-server",
  "-D", s"coursier.repositories=$coursierRepositories",
  "show", s"__[$scalaVersion].publishLocal",
).call(cwd = repositoryDir, check = true)
